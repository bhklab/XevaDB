{"version":3,"sources":["images/logo.png","images/bgImg7.png","Components/CounterNav/CounterStyle.js","Components/CounterNav/CounterNav.js","Components/HeatMap/HeatMap.js","Components/HeatMap/HeatMapData.js","Components/Oncoprint/Oncoprint.js","Components/Oncoprint/OncoprintData.js","Components/Footer/Footer.js","Components/Dataset/Dataset.js","Components/DonutChart/DonutChart.js","Components/Dataset/DatasetDonut.js","Components/Documentation/Documentation.js","Components/Drug/DrugTableStyle.js","Components/Drug/DrugTable.js","Components/Drug/DonutDrug.js","Components/DonutChart/DonutPatient.js","Components/Tissue/DonutTissue.js","Components/Search/SearchStyle.js","Components/Search/GeneList.js","Components/Search/Search.js","Components/Home/HomeStyle.js","Components/Home/Home.js","Components/Search/SearchResultOncoprint.js","Components/Search/SearchResultHeatMap.js","Components/Search/SearchResult.js","Components/TopNav/NavStyle.js","Components/TopNav/TopNav.js","Components/TumorGrowthCurve/TumorGrowthCurve.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","DonutNav","styled","div","_templateObject","CounterNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drugs","patients","datasets","tissues","_this2","axios","get","then","response","setState","data","react_default","a","createElement","CounterStyle","react_router_dom","build_default","start","end","duration","useEasing","to","React","Component","HeatMap","bind","assertThisInitialized","makeHeatmap","node","drug","drug_id","patient_id","dimensions","margin","patient","plotId","rect_height","height","rect_width","width","length","target_eval","value","color","target_color","drug_use","drug_index","patient_use","max_drug","drug_evaluations","i","CR","PR","SD","PD","NA","empty","patient_evaluations","j","total","calculate_evaluations","d","drug_alt","current_max_drug","_i","_keys","keys","entries","key","querystring_value","concat","rectKeys","yScale","d3","domain","rangeRound","xScale","yAxis","scale","tickSize","tickPadding","xAxis","svg","append","attr","bottom","top","left","right","skeleton","gskeleton","selectAll","enter","values","map","p_count","console","log","drug_class","replace","style","on","split","lines","temp","slice","push","text","target_rect","drug_eval","drug_Scale","range","x_axis","ticks","tickFormat","drug_height_Scale","max_patientid_total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","curent_max","err","return","patient_eval","patient_Scale","patient_scales","y_axis","ref","className","HeatMapData","dataset_param","parseData","result","dataset","pop","forEach","element","data_object","Drug","fontSize","Components_HeatMap_HeatMap","Oncoprint","genes","hmap_patients","makeOncoprint","rect_alterations","geneNames","_loop","alterations","highlight","gene_alterations","mut","amp","del","patient_alterations","diff","filter","x","includes","indexOf","maxPAmp","maxPMut","maxPHomdel","maxGAmp","maxGMut","maxGHomdel","max_width_arr","max_width","xrange_gene","gene_alter","stroke_width","xrange_axis","select","max_height_arr","max_height","patient_alter","yrange_patient","yrange_axis","nice","each","remove","_loop2","OncoprintData","updateResults","onco","hmap","gene_id","Components_Oncoprint_Oncoprint","styles","textAlign","paddingTop","minHeight","display","flexDirection","position","minWidth","backgroundColor","fontFamily","Footer","Dataset","match","params","id","react","HeatMap_HeatMapData","Oncoprint_OncoprintData","Components_Footer_Footer","DonutChart","makeDonutChart","chartId","tooltip","arc","outerRadius","innerRadius","labelArc","pie","sort","arcs","parameter","piearc","transition","ease","attrTween","b","startAngle","endAngle","t","mouseover","selection","mousemove","pageX","pageY","mouseout","centroid","donut_rect","Wrapper","DatasetDonut_templateObject","DatasetDonut","dataset_name","dataset_id","Components_DonutChart_DonutChart","Documentation","TableWrapper","DrugTableStyle_templateObject","h1Style","DrugTable","DrugTableStyle","es","columns","Header","accessor","sortable","defaultPageSize","filterable","DonutDrug_templateObject","DonutDrug","new_values","class_name","model_ids","DonutDrug_Wrapper","Drug_DrugTable","DonutTissue_templateObject","DonutTissue","tissue_name","DonutTissue_Wrapper","StyleBar","SearchStyle_templateObject","StyleButton","button","_templateObject2","customStyles","placeholder","provided","objectSpread","fontWeight","control","&:hover","borderColor","border","boxShadow","padding","borderRadius","background","indicatorSeparator","dropdownIndicator","cursor","option","singleValue","input","clearIndicator","GeneList","Search","axiosConfig","headers","Content-Type","Accept","handleDrugChange","selectedOption","action","selectedDrugs","allDrugs","label","handleDatasetChange","selectedDataset","initial","post","item","toConsumableArray","handleGeneListChange","selectedGeneSearch","handleGeneSearchChange","event","target","handleKeyPress","redirectUser","history","genomics","genomic","onKeyPress","react_select_browser_esm","options","onChange","isMulti","isSearchable","isClearable","type","onClick","withRouter","Container","HomeStyle_templateObject","Home","HomeStyle","Components_Search_Search","Components_CounterNav_CounterNav","SearchResultOncoprint","gene_data","heatmap_patients","heatmap","gene","shift","gene_param","drug_for_onco","heatmap_patient","SearchResultHeatMap","drug_data","patient_id_drug","drug_param","class","SearchResult","drug_param_for_onco","URLSearchParams","location","search","Search_SearchResultHeatMap","Search_SearchResultOncoprint","HeaderStyle","header","NavStyle_templateObject","LinkStyle","NavStyle_templateObject2","LogoStyle","img","_templateObject3","TopNav","src","logo","alt","TumorGrowthCurve","getParams","norm","dataParse","makeTumorGrowthCurve","batchToggle","patient_param","drugid_param","first","batch_select","data_formatted","batches","String","prototype","replaceAll","s","r","RegExp","new_datapt","exp_type","batch","model","pdx_points","times","parseInt","volumes","parseFloat","volume_normals","pdx_json","time","volume","volume_normal","property","index","self","unique","plotBatch","graph","xrange","yrange","dots","paths","linepath","y","timeUnion","minControl","minTreatment","treatment","getUnionOfTimepoints","exp_types","ypoint_arr","all_ypoint","n","exp","_groups","temp_ycoord","path","ycoord","findY","invert","mean","mean_svg","tooltips","html","mean_dots","mean_path","plotMeans","arr","pathLength","getTotalLength","Math","max","getPointAtLength","min","pos","abs","maxTimeArray","minVolArray","maxVolArray","maxVolNormArray","maxTime","apply","maxVolume","maxVolNorm","legend","yAxisAdd","volumeToggle","tumorCurve","_this3","marginTop","GlobalStyles","createGlobalStyle","App_templateObject","bgImg","Merge","App","Components_TopNav_TopNav","react_router","exact","component","render","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9fcf1ebc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1de5f71c.png\";","module.exports = __webpack_public_path__ + \"static/media/bgImg7.3eb67c7e.png\";","import styled from 'styled-components'\n\n\nconst DonutNav = styled.div`\n    display: flex;\n    background-color: rgb(255,255,255,0.8);\n    min-height: 70px;\n    max-height: 70px;\n    position: fixed;\n    bottom:0;\n    left:0;\n    width: 100%;\n    align-items: flex-end;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    font-family: 'Montserrat', sans-serif;\n    font-weight:500;\n    font-size: 1.4em;\n    padding-bottom:5px;\n    a{\n        padding: 10px;\n        color: #3453b0;\n        letter-spacing: 2px;\n        font-weight: bold;\n        font-size: 20px;\n        text-decoration: none;\n        &:hover {\n            color: #e5ac11;\n        }\n        text-align:center;\n    }\n    h4 {\n        margin-top: 3px;\n        margin-bottom: 0px;\n    }\n\n    @media screen and (max-width: 1500px) {\n        a {\n            font-size: 18px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 100px;\n        }\n    }\n\n    @media screen and (max-width: 1300px) {\n        a {\n            font-size: 18px;\n        }\n        \n        a:nth-child(1) {\n            margin-left : 10px;\n        }\n    }\n\n    @media screen and (max-width: 1000px) {\n        a {\n           font-size: 14px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 0px;\n        }\n    }\n\n    @media screen and (max-width: 700px) {\n        a {\n           font-size: 10px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 0px;\n        }\n    }\n`;\n\n\nexport default DonutNav","import React from 'react'\nimport CountUp from 'react-countup'\nimport { Link } from 'react-router-dom'\nimport DonutNav from './CounterStyle'\nimport axios from 'axios'\n\n\nclass CounterNav extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // setting states for all the variables.\n        this.state = {\n            drugs: 0,\n            patients: 0,\n            datasets: 8,\n            tissues: 0\n        }\n    }\n\n    componentDidMount() {\n        axios.get(`http://localhost:5000/api/v1/counter`)\n            .then(response => {\n                this.setState({\n                    tissues: response.data.data[0][0]['tissues'],\n                    drugs: response.data.data[1][0]['drugs'],\n                    patients: response.data.data[2][0]['patients']\n                })\n            })\n    }\n\n\n    render() {\n        return (\n            <DonutNav>\n\n                <Link>\n                    <CountUp \n                        start = {0}\n                        end = {this.state.datasets} \n                        duration = {3}\n                        useEasing={true}\n                    />\n                    <h4> DATASETS </h4>\n                </Link>\n\n\n                <Link to='/tissues'>\n                    <CountUp \n                        start = {0}\n                        end = {this.state.tissues} \n                        duration = {3}\n                        useEasing={true}\n                    />\n                    <h4> TISSUES </h4>\n                </Link>\n\n\n                 <Link>\n                    <CountUp \n                        start = {0}\n                        end = {this.state.patients} \n                        duration = {3}\n                        useEasing={true}\n                    />\n                    <h4> PATIENTS </h4> \n                </Link>\n\n\n                <Link to='/drugs'>\n                    <CountUp \n                        start = {0}\n                        end = {this.state.drugs}\n                        duration = {3}\n                        useEasing={true}\n                    /> \n                    <h4> DRUGS </h4>\n                </Link>\n                    \n\n            </DonutNav>\n        )\n    }\n\n}\n\nexport default CounterNav","import React from 'react'\nimport * as d3 from 'd3'\nimport PropTypes from 'prop-types'\n\nclass HeatMap extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.HeatMap = this.HeatMap.bind(this);\n        this.makeHeatmap = this.makeHeatmap.bind(this);\n    }\n\n    componentDidMount() {\n        //this.HeatMap()\n    }\n\n    componentDidUpdate() {\n        this.HeatMap()\n    }\n\n    HeatMap() {\n        const node = this.node;\n        let data = this.props.data;\n        let drug = this.props.drug_id;\n        let patient_id = this.props.patient_id;\n        let dimensions = this.props.dimensions;\n        let margin = this.props.margin;\n        let plotId = 'plots';\n        this.makeHeatmap(data, patient_id, drug, plotId, dimensions, margin, node)\n    }\n\n// main heatmap function taking parameters as data, all the patient ids and drugs.\n   makeHeatmap(data, patient, drug, plotId, dimensions, margin, node) {\n    this.node = node\n\n    // height and width for the SVG based on the number of drugs and patient/sample ids.\n    // height and width of the rectangles in the main skeleton.\n    let rect_height = dimensions.height;\n    let rect_width = dimensions.width;\n\n    // this height and width is used for setting the body.\n    let height = drug.length * rect_height + 100;\n    let width = patient.length * rect_width + 100;\n\n    let target_eval = [\n                            { value : 'CR', color: '#0033CC' },\n                            { value: 'PR', color: '#1a9850' },\n                            { value : 'SD', color: '#fed976' },\n                            { value: 'PD', color: '#e41a1c'}\n    ]\n    let target_color = ['#0033CC', '#1a9850', '#fed976', '#e41a1c', 'lightgray']\n\n    //setting the query strings\n    let drug_use = '' \n    let drug_index = 0\n    let patient_use = patient\n\n    // drug evaluations\n    let max_drug = 0;\n    let drug_evaluations = {}\n    for(let i=0; i<drug.length; i++) {\n        drug_evaluations[drug[i]] = {'CR':0, 'PR': 0, 'SD': 0, 'PD': 0, 'NA':0, 'empty': 0}\n    }\n\n    // patient evaluations\n    let patient_evaluations = {}\n    for(let j=0; j<patient.length; j++) {\n        patient_evaluations[patient[j]] = {'CR':0, 'PR': 0, 'SD': 0, 'PD': 0, 'NA':0, 'empty': 0, 'total':0}\n    }\n\n    /* this code will add to the drug_evaluations and \n      patient_evaluations object the values for PD,SD,PR,CR \n      and also sets the value of the letiable max_drug. */\n    function calculate_evaluations(d,i) {\n        let drug_alt = drug[i];\n            keys = Object.entries(d);\n            let current_max_drug = 0;\n            for(const key of keys) {\n                if(key[1] === '') {key[1] = 'empty'}\n                drug_evaluations[drug_alt][key[1]]++\n                patient_evaluations[key[0]][key[1]]++\n                if(key[1] !== 'NA' || key[1] !== 'empty') { \n                    current_max_drug++;\n                    patient_evaluations[key[0]].total++;\n                }\n            }\n            if (current_max_drug > max_drug) { max_drug = current_max_drug }\n    }\n\n\n    /* This code is used to produce the query strings */\n    function querystring_value(d,i) {\n        if(i === 0) {\n            drug_use = drug[drug_index]\n            drug_index++\n        }\n        if (d.length === 2 || d.length === 'empty') {\n            return `/curve?patient=${patient_use[i]}&drug_id=${drug_use}` \n        }\n    }\n    \n\n                                    /** SCALE FOR MAIN SKELETON **/\n\n    //defining the scale that we will use for our x-axis and y-axis for the skeleton.\n    let yScale = d3.scaleBand()\n                   .domain(drug)\n                   .rangeRound([rect_height, drug.length * rect_height + rect_height])\n\n    let xScale = d3.scaleBand()\n                   .domain(patient)\n                   .rangeRound([0, patient.length * rect_width])\n\n    // defining the x-axis for the main skeleton and setting tick size to zero will remove the ticks.\n    let yAxis = d3.axisLeft()\n                  .scale(yScale)\n                  .tickSize(0)\n                  .tickPadding(15)\n                  \n    \n    let xAxis = d3.axisTop()\n                  .scale(xScale)\n                  .tickSize(5)\n                  \n                                    /** SETTING SVG ATTRIBUTES **/\n\n    // make the SVG element.\n    let svg = d3.select(node)\n                .append('svg')\n                .attr('id', 'heatmap-' + plotId)\n                .attr('xmlns', 'http://wwww.w3.org/2000/svg')\n                .attr('xmlns:xlink', 'http://wwww.w3.org/1999/xlink')\n                .attr('height',height + margin.bottom + margin.top) \n                .attr('width', width + margin.left + margin.right)\n                .append('g')\n                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n                \n                \n    \n\n                                    /** HEATMAP SKELETON **/\n\n    // structure of the heatmap\n    let skeleton = svg.append('g')\n                       .attr('id', 'skeleton')\n    \n                       \n    // this will create g element for each of data row (equivalent to total number of row)\n    let drug_response = skeleton.append('g')\n                                .attr('id', 'targ_rect')\n\n    \n    let gskeleton =  drug_response.selectAll('g')\n                                  .data(data)\n                                  .enter()\n                                  .append('g')\n                                  .attr('transform', function(d,i) {\n                                        return `translate(0,${i * rect_height})`\n                                  })\n\n\n    let rectKeys;\n    // this will append rect equivalent to number of patient ids.\n    let drawrectangle = gskeleton.selectAll('rect.hmap-rect')\n                                .data(function(d,i) {  \n                                    //calling the function and passing the data d as parameter.\n                                    calculate_evaluations(d,i);\n                                    //this returns the object values to next chaining method.\n                                    rectKeys = Object.keys(d);\n                                    const rectValue = Object.values(d,i)\n                                                            .map((value) => {\n                                                                // console.log(value, 'length is' ,value.length)                                \n                                                                if (value.length === 2) {\n                                                                    return value\n                                                                } else if (value.length === 0) {\n                                                                    return value = 'empty'\n                                                                }\n                                                            })\n                                    return rectValue;\n                                    })\n                                .enter()\n                                .append('a')\n                                .attr('xlink:href', function(d,i) {\n                                    return querystring_value(d,i)\n                                })\n                                .append('rect')\n                                .attr(\"class\", function(d,i) {\n                                    return \"hmap-rect heatmap-\" + rectKeys[i]\n                                })\n                                .attr('width', rect_width - 2)\n                                .attr('height', rect_height - 2)\n                                .attr('x', function(d,i) {\n                                    return i * rect_width ;  \n                                })\n                                .attr('y', rect_height)\n\n\n                                 \n    // this will fill the rectangles with different color based on the data. \n            drawrectangle.attr('fill', function(d) {\n                                    if (d === 'CR') {\n                                        return target_color[0]\n                                    } else if (d === 'PR') {\n                                        return target_color[1]\n                                    } else if (d === 'SD') {\n                                        return target_color[2]\n                                    } else if (d === 'PD') {\n                                        return target_color[3]\n                                    } else {\n                                        return target_color[4]\n                                    }\n                                })     \n                                \n    //reset \n    drug_evaluations = {}\n    for(let i=0; i<drug.length; i++) {\n        drug_evaluations[drug[i]] = {'CR':0, 'PR': 0, 'SD': 0, 'PD': 0, 'NA':0, 'empty': 0}\n    }\n\n    // patient evaluations\n    patient_evaluations = {}\n    for(let j=0; j<patient.length; j++) {\n        patient_evaluations[patient[j]] = {'CR':0, 'PR': 0, 'SD': 0, 'PD': 0, 'NA':0, 'empty': 0, 'total':0}\n    }\n    let p_count = 0;\n    drug_index = 0;\n\n    //let highlight = \n    gskeleton.selectAll('rect.hmap-hlight')\n                        .data(function(d,i) {  \n                            console.log(d)\n                            //calling the function and passing the data d as parameter.\n                            calculate_evaluations(d,i);\n                            //this returns the object values to next chaining method.\n                            rectKeys = Object.keys(d);\n                            const rectValue = Object.values(d,i)\n                                                    .map((value) => {\n                                                        // console.log(value, 'length is' ,value.length)                                \n                                                        if (value.length === 2) {\n                                                            return value\n                                                        } else if (value.length === 0) {\n                                                            return value = 'empty'\n                                                        }\n                                                    })\n                            return rectValue;\n                            })\n                        .enter()\n                        .append('a')\n                        .attr('xlink:href', function(d,i) {\n                            return querystring_value(d,i)\n                        })\n                        .append('rect')\n                        .attr(\"class\", function(d, i) {\n                            let drug_class = drug[p_count].replace(/\\s/g,'').replace(/[+]/,'-')\n                            if (i === (patient.length - 1)) {\n                                p_count++\n                            }\n                            return \"hmap-hlight-\" + rectKeys[i] + \" hmap-hlight-\" + drug_class\n                        })\n                        .attr('width', rect_width - 2)\n                        .attr('height', rect_height - 2)\n                        .attr('x', function(d,i) {\n                            return i * rect_width ;  \n                        })\n                        .attr(\"fill\", \"rgb(0,0,0)\")\n                        .attr('y', rect_height)\n                        .style(\"opacity\", 0)\n                        .on(\"mouseover\", function(d,i) {\n                            let drug_class = d3.select(this).attr(\"class\").split(\" \")[1]\n                            d3.selectAll(\".hmap-hlight-\" + rectKeys[i])\n                                .style(\"opacity\", 0.2)\n                            d3.selectAll(\".oprint-hlight-\" + rectKeys[i])\n                                .style(\"opacity\", 0.2)\n                            d3.selectAll(\".hlight-space-\" + rectKeys[i])\n                                .style(\"opacity\", 0.2)\n                        \n                        })\n                        .on(\"mouseout\", function(d,i) {\n                            let drug_class = d3.select(this).attr(\"class\").split(\" \")[1]\n                            d3.selectAll(\".hmap-hlight-\" + rectKeys[i])\n                                .style(\"opacity\", 0)\n                            d3.selectAll(\".oprint-hlight-\" + rectKeys[i])\n                                .style(\"opacity\", 0)\n                            d3.selectAll(\".hlight-space-\" + rectKeys[i])\n                                .style(\"opacity\", 0)\n                        })\n\n    //Creating lines.\n    let lines = svg.append(\"g\")\n                    .attr(\"id\", \"lines\")\n                    .attr('transform', function(d,i) {\n                        return `translate(2,${height-62})`\n                    })\n\n    const temp = patient.slice(0)\n    temp.push(\"\")\n\n                lines.selectAll(\"line.dashed-line\")\n                        .data(temp)\n                        .enter()\n                            .append(\"line\")\n                            .attr(\"class\", \"dashed-line\")\n                            .attr(\"x1\", function(d,i) {\n                                return i * (rect_width) - 3;  \n                            })\n                            .attr(\"x2\", function(d,i) {\n                                return i * (rect_width) - 3;  \n                            })\n                            .attr(\"y1\", 2)\n                            .attr(\"y2\", 200)\n                            .attr(\"stroke\", \"black\")\n                            .attr(\"stroke-width\", 1)\n                            .style(\"stroke-dasharray\", \"3 2\")\n                            .style(\"opacity\", .2)\n\n                lines.selectAll(\"rect.hlight-space\")\n                        .data(patient)\n                        .enter()\n                        .append('rect')\n                        .attr(\"class\", function(d) {\n                            return \"hlight-space-\" + d\n                        })\n                        .attr('width', rect_width - 2)\n                        .attr('height', 200)\n                        .attr('x', function(d,i) {\n                            return i * rect_width - 2;  \n                        })\n                        .attr(\"fill\", \"rgb(0,0,0)\")\n                        .attr('y', 0)\n                        .style(\"opacity\", 0)    \n\n                            /** X-AXIS AND Y-AXIS FOR THE SKELETON **/\n                                                                        \n    // calling the y-axis and removing the stroke.\n    let drug_name = skeleton.append('g')\n                    .attr('id', 'drug_name')\n\n                    drug_name.attr('stroke-width', '0')\n                            .style('font-size', '12px')\n                            .attr('font-weight', '500')\n                            .call(yAxis)\n                            .selectAll(\"text\")\n                            .attr('fill', function(d) {\n                                if(d === 'untreated') {return '#3453b0'}\n                                else return 'black'\n                            })\n                            .on(\"mouseover\", function() {\n                            let drug_class = d3.select(this).text().replace(/\\s/g,'').replace(/[+]/,'-')\n                            d3.selectAll(\".hmap-hlight-\" + drug_class)\n                                        .style(\"opacity\", 0.2)    \n                            })\n                            .on(\"mouseout\", function() {\n                            let drug_class = d3.select(this).text().replace(/\\s/g,'').replace(/[+]/,'-')\n                            d3.selectAll(\".hmap-hlight-\" + drug_class)\n                                        .style(\"opacity\", 0)\n                            });\n\n    // calling the x-axis to set the axis and we have also transformed the text.\n    let patient_id = skeleton.append('g')\n                             .attr('id', 'patient_id')\n    \n    patient_id.attr('stroke-width', '0')\n              .style('font-size', '13px')\n              .call(xAxis)\n              .selectAll('text')\n              .attr('transform', 'rotate(-90)')\n              .attr('font-weight', '500')\n              .attr('x','0.5em')\n              .attr('y','.15em')\n\n\n                                    /** SMALL RECTANGLES ON RIGHT SIDE OF HEATMAP **/\n\n    // This will create four rectangles on right side for the Evaluation of target lesions.\n    let target_rect = skeleton.append('g')\n                              .attr('id', 'small_rect')\n\n                      target_rect.selectAll('rect')\n                                 .data(target_eval)\n                                 .enter()\n                                 .append('rect')\n                                 .attr('x', (patient.length * rect_width + 120))\n                                 .attr('y', function(d, i) {\n                                    return 100 + i * 25;\n                                 })\n                                 .attr('height', '15')\n                                 .attr('width', '15')\n                                 .attr('fill', function(d) {\n                                     return d.color;\n                                 })\n                        \n                      target_rect.selectAll('text')\n                                 .data(target_eval)\n                                 .enter()\n                                 .append('text')\n                                 .attr('x', (patient.length * rect_width + 140))\n                                 .attr('y', function(d,i) {\n                                     return 112 + i * 25;\n                                 })\n                                 .text(function(d) {\n                                     return d.value;\n                                 })\n                                 .attr('font-size', '14px')\n\n\n                                            /** VERTICAL GRAPH ON RIGHT SIDE OF HEATMAP **/\n\n    let stroke_width = 0.75;\n    \n    // This will make a right side vertical graph.\n    let drug_eval = svg.append('g')\n                      .attr('id', 'drug_eval')\n\n    let drug_Scale = d3.scaleLinear()\n                       .domain([0,max_drug])\n                       .range([0,80])\n\n    // This will set an x-axis for the vertical graph.\n    let x_axis = d3.axisTop()\n                    .scale(drug_Scale)\n                    .ticks(4)\n                    .tickSize(3)\n                    .tickFormat(d3.format('.0f'));\n\n                svg.append('g')\n                    .attr('transform', 'translate(' + (patient.length * rect_width + 20) + ',' + 35 + ')')\n                    .call(x_axis)\n                    .selectAll('text')\n                    .attr('fill', 'black')\n                    .style('font-size', 8)\n                    .attr('stroke', 'none');\n            \n\n    let  drug_height_Scale = d3.scaleLinear()\n                               .domain([0, (44 + (drug.length - 1) * 40)])\n                               .range([0, (rect_height * drug.length) + 10])\n\n                            drug_eval.append('rect')\n                               .attr('class', 'drug_eval_rect')\n                               .attr('x', patient.length * rect_width + 20)\n                               .attr('y', 35)\n                               .attr('height', rect_height * drug.length)\n                               .attr('width', drug_Scale(max_drug))\n                               .attr('fill', 'white')\n                               .style('stroke', 'black')\n                               .style('stroke-width', 1)\n\n    for(let i=0; i<drug.length; i++) {\n        drug_eval.append('rect')\n                 .attr('class', 'drug_eval_cr')\n                 .attr('height', 26)\n                 .attr('width', drug_Scale(drug_evaluations[drug[i]]['CR']))\n                 .attr('x',patient.length * rect_width + 20)\n                 .attr('y',  drug_height_Scale(42 + i * 40))\n                 .attr('fill', target_color[0])\n                 .style('stroke', 'black')\n                 .style('stroke-width', stroke_width)\n        \n        drug_eval.append('rect')\n                 .attr('class', 'drug_eval_pr')\n                 .attr('height', 26)\n                 .attr('width', drug_Scale(drug_evaluations[drug[i]]['PR']))\n                 .attr('x',patient.length * rect_width + 20 + drug_Scale(drug_evaluations[drug[i]]['CR']))\n                 .attr('y',  drug_height_Scale(42 + i * 40))\n                 .attr('fill', target_color[1])\n                 .style('stroke', 'black')\n                 .style('stroke-width', stroke_width)\n\n        drug_eval.append('rect')\n                 .attr('class', 'drug_eval_sd')\n                 .attr('height', 26)\n                 .attr('width', drug_Scale(drug_evaluations[drug[i]]['SD']))\n                 .attr('x',patient.length * rect_width + 20 + drug_Scale(drug_evaluations[drug[i]]['CR']) + drug_Scale(drug_evaluations[drug[i]]['PR']))\n                 .attr('y',  drug_height_Scale(42 + i * 40))\n                 .attr('fill', target_color[2])\n                 .style('stroke', 'black')\n                 .style('stroke-width', stroke_width)\n\n        drug_eval.append('rect')\n                 .attr('class', 'drug_eval_pd')\n                 .attr('height', 26)\n                 .attr('width', drug_Scale(drug_evaluations[drug[i]]['PD']))\n                 .attr('x',patient.length * rect_width + 20 + drug_Scale(drug_evaluations[drug[i]]['CR']) + drug_Scale(drug_evaluations[drug[i]]['PR']) + drug_Scale(drug_evaluations[drug[i]]['SD'])) \n                 .attr('y', drug_height_Scale(42 + i * 40))\n                 .attr('fill', target_color[3])  \n                 .style('stroke', 'black')\n                 .style('stroke-width', stroke_width)  \n    }\n\n\n                                        /** HORIZONTAL GRAPH AT THE TOP OF HEATMAP **/\n\n    let max_patientid_total = 0;\n    let box_height = 80;\n\n    // This will set the maximum number of total letiants.\n    let keys = Object.entries(patient_evaluations);\n    for(const key of keys) {\n        let curent_max = key[1].total;\n        if(curent_max > max_patientid_total) {\n            max_patientid_total = curent_max;\n        }\n    }\n\n    // This will only run if the length of the drug array is greater than 1 (it has more than one drug)\n    if(drug.length > 1) {\n        // appending 'g' element to the SVG.\n        let patient_eval = svg.append('g')\n                                .attr('id', 'patient_eval')\n\n\n        // setting the outer rectangle.\n        patient_eval.append('rect')\n                    .attr('class', 'patient_eval_rect')\n                    .attr('x', 0)\n                    .attr('y', -130)\n                    .attr('height', box_height)\n                    .attr('width', patient.length * 20)\n                    .attr('fill', 'white')\n                    .style('stroke', 'black')\n                    .style('stroke-width', 1)\n\n        // setting scale to map max patient_id value to range (height of the box.)\n        let patient_Scale = d3.scaleLinear()\n                                .domain([0,max_patientid_total])\n                                .range([0,box_height])\n\n        // This code will set y-axis of the graph at top\n        if(max_patientid_total !== 0) {\n\n            let patient_scales = d3.scaleLinear()\n                                    .domain([0,max_patientid_total])\n                                    .range([box_height,0]);\n                \n            let y_axis = d3.axisLeft()\n                            .scale(patient_scales)\n                            .ticks(2)\n                            .tickSize(0)\n                            .tickFormat(d3.format('.0f'));\n\n            svg.append('g')\n                .attr('transform', 'translate(0,-130.5)')\n                .call(y_axis)\n        }\n\n                    \n        for(let i=0; i<patient.length; i++) {\n            patient_eval.append('rect')\n                    .attr('class', 'patient_eval_cr')\n                    .attr('height', patient_Scale(patient_evaluations[patient[i]]['CR']))\n                    .attr('width', 16)\n                    .attr('x', i * 20)\n                    .attr('y', -130 + box_height - patient_Scale(patient_evaluations[patient[i]]['CR']))\n                    .attr('fill', target_color[0])\n                    .style('stroke', 'black')\n                    .style('stroke-width', stroke_width)\n            \n            patient_eval.append('rect')\n                    .attr('class', 'patient_eval_pr')\n                    .attr('height', patient_Scale(patient_evaluations[patient[i]]['PR']))\n                    .attr('width', 16)\n                    .attr('x', i * 20)\n                    .attr('y', -130 + box_height - patient_Scale(patient_evaluations[patient[i]]['CR']) - patient_Scale(patient_evaluations[patient[i]]['PR']))\n                    .attr('fill', target_color[1])\n                    .style('stroke', 'black')\n                    .style('stroke-width', stroke_width)\n\n            patient_eval.append('rect')\n                    .attr('class', 'patient_eval_sd')\n                    .attr('height', patient_Scale(patient_evaluations[patient[i]]['SD']))\n                    .attr('width', 16)\n                    .attr('x', i * 20)\n                    .attr('y', -130 + box_height - patient_Scale(patient_evaluations[patient[i]]['CR']) - patient_Scale(patient_evaluations[patient[i]]['PR']) - patient_Scale(patient_evaluations[patient[i]]['SD']))\n                    .attr('fill', target_color[2])\n                    .style('stroke', 'black')\n                    .style('stroke-width', stroke_width)\n\n            patient_eval.append('rect')\n                    .attr('class', 'patient_eval_pd')\n                    .attr('height', patient_Scale(patient_evaluations[patient[i]]['PD']))\n                    .attr('width', 16)\n                    .attr('x', i * 20)\n                    .attr('y', -130 + box_height - patient_Scale(patient_evaluations[patient[i]]['CR']) - patient_Scale(patient_evaluations[patient[i]]['PR']) - patient_Scale(patient_evaluations[patient[i]]['SD']) - patient_Scale(patient_evaluations[patient[i]]['PD']))\n                    .attr('fill', target_color[3])\n                    .style('stroke', 'black')\n                    .style('stroke-width', stroke_width)\n        }\n    }\n\n    \n\n}\n\n    render() {\n        return (\n            <div ref = {node => this.node = node} className=\"heatmap-wrapper\">\n            </div>\n        )\n    }\n}\n\n\n\nHeatMap.propTypes = {\n    drug_id: PropTypes.array.isRequired,\n    patient_id: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    dimensions: PropTypes.object.isRequired,\n    margin: PropTypes.object.isRequired\n}\n\nexport default HeatMap","import React from 'react'\nimport HeatMap from './HeatMap'\nimport axios from 'axios'\n\n\nclass HeatMapData extends React.Component {\n\n    constructor(props) {\n        super(props)\n        //setting the states for the data.\n        this.state = {\n            data : [],\n            patient_id : [],\n            drug_id : [],\n            dataset_param : 0\n        };\n        //binding the functions declared.\n        this.parseData = this.parseData.bind(this);\n    }\n\n    // this function takes the parsed result and set the states.\n    parseData(result) {\n        let dataset = []\n        let patient = []\n        let drug = []\n\n        //patient array.\n        patient = result.pop()\n        \n        // this function will loop through the elements and\n        // assign empty values in case model information is not available.\n        result.forEach(element => {\n            let data_object = {}\n            drug.push(element.Drug)\n            patient.forEach((patient) => {\n                if(!element[patient]) {\n                    data_object[patient] = ''\n                } else {\n                    data_object[patient] = element[patient]\n                }\n            })\n            dataset.push(data_object)\n        });\n\n        this.setState({\n            drug_id : drug,\n            patient_id : patient,\n            data: dataset\n        })\n    }\n\n    componentWillMount() {\n        this.setState ({\n            dataset_param : this.props.dataset\n        })\n    }\n\n    componentDidMount() {\n        if(this.state.dataset_param > 0) {\n            axios.get(`http://localhost:5000/api/v1/response/${this.state.dataset_param}`)\n             .then(response => {\n                 this.parseData(response.data);\n             })\n        } else {\n            axios.get(`http://localhost:5000/api/v1/respeval`)\n            .then(response => {\n                this.parseData(response.data);\n            })\n        }\n    }\n\n\n    dimensions = {\n        height: 35,\n        width: 20,\n    }\n\n    margin = {\n        top: 200,\n        right: 200,\n        bottom: 20,\n        left: 250\n    }\n\n    \n    render() {\n        return (\n            <div className=\"wrapper\" style={{margin:\"auto\", fontSize:\"0\"}}>\n                <HeatMap\n                    data = {this.state.data} \n                    drug_id = {this.state.drug_id} \n                    className = \"heatmap\"\n                    patient_id = {this.state.patient_id} \n                    dimensions = {this.dimensions}\n                    margin = {this.margin}\n                />\n            </div>\n        )\n    }\n}\n\nexport default HeatMapData","import React from 'react'\nimport * as d3 from 'd3'\nimport PropTypes from 'prop-types'\n\nclass Oncoprint extends React.Component {\n    constructor(props) {\n        super(props)\n        this.Oncoprint = this.Oncoprint.bind(this);\n    }\n\n    componentDidMount() {\n        //this.Oncoprint()\n    }\n\n    componentDidUpdate() {\n        this.Oncoprint()\n    }\n\n    Oncoprint() {\n        const node = this.node;\n        let data = this.props.data;\n        let genes = this.props.genes;\n        let plotId = 'plots';\n        let margin = this.props.margin;\n        let dimensions = this.props.dimensions;\n        let patient_id = this.props.patient_id;\n        let hmap_patients = this.props.hmap_patients;\n        this.makeOncoprint(data, genes, plotId, node, patient_id, hmap_patients, dimensions, margin)\n    }\n\n\n    makeOncoprint(data, genes, plotId, node, patient_id, hmap_patients, dimensions, margin) {\n        this.node = node\n        // height and width for the SVG based on the number of genes and patient/sample ids.\n        // height and width of the rectangles in the main skeleton.\n        let rect_height = dimensions.height;\n        let rect_width = dimensions.width;\n        // this height and width is used for setting the body.\n        let height = genes.length * rect_height + 100;\n        let width = hmap_patients.length * rect_width + 100;\n\n        // adding this for rectangles on right side of oncoprint.\n        let rect_alterations = [\n            { value : 'Deep Deletion', color: '#0033CC' },\n            { value: 'Amplification', color: '#1a9850' },\n            { value: 'Mutation', color: '#e41a1c'},\n            { value: 'Wild Type', color: \"lightgray\"},\n            { value: 'Not Available', color: \"none\"}   \n        ]\n\n                                                    /** SETTING SVG ATTRIBUTES **/\n    \n        // make the svg element\n        let svg = d3.select(node)\n            .append('svg')\n            .attr('id', 'oncoprint-' + plotId) // set an id so that I can remove+replace on refresh\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink') \n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g')\n            .attr('transform',\n                    'translate(' + margin.left + ',' + (margin.top) + ')')\n\n\n                                                    /** Oncoprint SKELETOON **/\n        \n        // skeleton of the oncoprint\n        let skeleton = svg.append('g')\n            .attr('id', 'skeleton')\n    \n        for (let i = 0; i < genes.length; i++) {\n            for (let j = 0; j < hmap_patients.length; j++) {\n                skeleton.append('rect')\n                        .attr('class', 'bg-rect') \n                        .attr('width', rect_width - 2)\n                        .attr('height', rect_height - 2)\n                        .attr('fill', 'lightgrey')\n                        .attr('x', j * (rect_width))\n                        .attr('y', i * (rect_height ))\n            }\n        }\n    \n        let geneNames = skeleton.append('g')\n                                .attr('id', 'gene-names')\n    \n        // gene names on the y axis\n        for (let i = 0; i < genes.length; i++) {\n            geneNames.append('text')\n                    .attr('class', genes[i])\n                    .attr('dx', -20)\n                    .style('text-anchor', 'end')\n                    .style('font-size', '13px')\n                    .attr('dy', i * (rect_height) + 23)\n                    .attr('font-weight', '500')\n                    .text(genes[i])\n                    .on(\"mouseover\", function() {\n                        d3.selectAll(\".oprint-hlight-\" + genes[i])\n                          .style(\"opacity\", 0.2)\n\n                    })\n                    .on(\"mouseout\", function() {\n                        d3.selectAll(\".oprint-hlight-\" + genes[i])\n                          .style(\"opacity\", 0)\n                    });\n        }\n    \n                                                /** Setting Alterations **/\n\n        // alterations: mutations are #1a9850 and a third, AMP/del are #e41a1c/#0033CC and full respectively\n        let alterations = svg.append('g')\n                             .attr('id', 'alterations')\n\n        let highlight = svg.append(\"g\")\n                           .attr(\"id\", \"highlight\")\n    \n        // collect info about alterations per gene/patient for plotting later\n        let gene_alterations = {}\n        for (let i = 0; i < genes.length; i++) {\n            gene_alterations[genes[i]] = {'mut':0,'amp':0,'del':0}\n        } \n\n        let patient_alterations = []\n        for (let i = 0; i < hmap_patients.length; i++) {\n            patient_alterations.push({'mut':0,'amp':0,'del':0})\n        }\n\n        // take the difference of patient_id from hmap_patients\n        let diff = hmap_patients.filter(x => !patient_id.includes(x))\n        //console.log(diff)\n\n\n\n        for (let i = 0; i < genes.length; i++) {\n            for (let j = 0; j < hmap_patients.length; j++) {\n                //data[i][hmap_patients[j]] === ''\n                if (diff.indexOf(hmap_patients[j]) !== -1) {\n                    // if not sequenced, make it white with a border\n                    alterations.append('rect')\n                                .attr('class', 'alter-rect del')\n                                .attr('width', rect_width - 4)\n                                .attr('height', rect_height - 4)\n                                .attr('fill', 'white')\n                                .attr(\"stroke\", \"lightgray\")\n                                .attr(\"stroke-width\", \"1px\")\n                                .attr('x', j * (rect_width)+1) \n                                .attr('y', i * (rect_height)+1)\n                } else {\n                    if (data[i][hmap_patients[j]].includes('Del0.8') || data[i][hmap_patients[j]].includes('Deletion')) {\n                        gene_alterations[genes[i]]['del']++;\n                        patient_alterations[j]['del']++;\n                        alterations.append('rect')\n                                    .attr('class', 'alter-rect del')\n                                    .attr('width', rect_width - 2)\n                                    .attr('height', rect_height - 2)\n                                    .attr('fill', '#0033CC')\n                                    .attr('x', j * (rect_width)) \n                                    .attr('y', i * (rect_height))\n                    }\n                    if (data[i][hmap_patients[j]].includes('Amp') || data[i][hmap_patients[j]].includes('Amplification')) {\n                        gene_alterations[genes[i]]['amp']++;\n                        patient_alterations[j]['amp']++;\n                        alterations.append('rect')\n                                    .attr('class', 'alter-rect amp')\n                                    .attr('width', rect_width - 2)\n                                    .attr('height', rect_height - 2)\n                                    .attr('fill', '#1a9850')\n                                    .attr('x', j * (rect_width)) \n                                    .attr('y', i * (rect_height))\n                    }\n                    if (data[i][hmap_patients[j]].includes('MutNovel') || data[i][hmap_patients[j]].includes('mutation')) {\n                        gene_alterations[genes[i]]['mut']++;\n                        patient_alterations[j]['mut']++;\n                        alterations.append('rect')\n                                    .attr('class', 'alter-rect mut')\n                                    .attr('width', rect_width - 2)\n                                    .attr('height', rect_height - 25)\n                                    .attr('fill', '#e41a1c')\n                                    .attr('x', j * (rect_width)) \n                                    .attr('y', i * (rect_height) + 12)\n                    }\n                    if (data[i][hmap_patients[j]].includes('NA')) {\n                        alterations.append('rect')\n                                    .attr('class', 'alter-rect amp')\n                                    .attr('width', rect_width - 2)\n                                    .attr('height', rect_height - 5)\n                                    .attr('fill', 'white')\n                                    .style('stroke', 'black')\n                                    .style('stroke-width', .5)\n                                    .attr('x', j * (rect_width)) \n                                    .attr('y', i * (rect_height))\n                    }\n                }\n            }\n        }   \n\n        \n\n                                                    /** Setting Maxes for the alterations **/\n    \n        // getting the maxes\n        let maxPAmp = []; \n        let maxPMut = []; \n        let maxPHomdel = [];\n        for (let i = 0; i < patient_alterations.length; i++) {\n            maxPAmp.push(patient_alterations[i]['amp'])\n            maxPHomdel.push(patient_alterations[i]['del'])\n            maxPMut.push(patient_alterations[i]['mut'])\n        }\n        maxPAmp = d3.max(maxPAmp)\n        maxPHomdel = d3.max(maxPHomdel)\n        maxPMut = d3.max(maxPMut)\n    \n        // getting the maxes\n        let maxGAmp = []; \n        let maxGMut = []; \n        let maxGHomdel = [];\n        for (let i = 0; i < genes.length; i++) {\n            maxGAmp.push(gene_alterations[genes[i]]['amp'])\n            maxGHomdel.push(gene_alterations[genes[i]]['del'])\n            maxGMut.push(gene_alterations[genes[i]]['mut'])\n        }\n        maxGAmp = d3.max(maxGAmp)\n        maxGHomdel = d3.max(maxGHomdel)\n        maxGMut = d3.max(maxGMut)\n    \n                                                        /** ALTERATION GRAPHS **/\n        \n                                                          /** Vertical Graph **/\n        // calculating max width\n        let max_width_arr = []\n        for (let i = 0; i < genes.length; i++) { \n            max_width_arr.push(gene_alterations[genes[i]]['mut'] + gene_alterations[genes[i]]['amp'] + gene_alterations[genes[i]]['del'])\n        }\n    \n        let max_width = d3.max(max_width_arr)\n\n        let xrange_gene = d3.scaleLinear()\n                            .domain([0, d3.max([maxGAmp, maxGMut, maxGHomdel])])\n                            .range([0,40]);\n\n        \n        let gene_alter = svg.append('g')\n                            .attr('id', 'gene-alter')\n                            .attr('transform', 'translate(' + (hmap_patients.length * rect_width + 20) + ',0)')\n\n        let stroke_width = 1; // this will set the stroke width of the outer rectangle \n\n            // setting the outer rectangle.\n            gene_alter.append('rect')\n                        .attr('class', 'patient_eval_rect')\n                        .attr('x', 0)\n                        .attr('y', 0)\n                        .attr('height', (rect_height) *(genes.length))\n                        .attr('width', xrange_gene(max_width))\n                        .attr('fill', 'white')\n                        .style('stroke', 'black')\n                        .style('stroke-width', stroke_width)\n    \n            for (let i = 0; i < genes.length; i++) {\n                gene_alter.append('rect')\n                            .attr('class', 'gene-rect mut')\n                            .attr('height', rect_height - 2)\n                            .attr('width', xrange_gene(gene_alterations[genes[i]]['mut']))\n                            .attr('fill', '#e41a1c')\n                            .attr('y', (i * (rect_height)))\n                            .attr('x', stroke_width/2)\n    \n                gene_alter.append('rect')\n                            .attr('class', 'gene-rect amp')\n                            .attr('height', rect_height - 2)\n                            .attr('width', xrange_gene(gene_alterations[genes[i]]['amp']))\n                            .attr('fill', '#1a9850')\n                            .attr('y', i * (rect_height) ) \n                            .attr('x', xrange_gene(gene_alterations[genes[i]]['mut']) + stroke_width/2)\n                            \n                \n                gene_alter.append('rect')\n                            .attr('class', 'gene-rect del')\n                            .attr('height', rect_height - 2)\n                            .attr('width', xrange_gene(gene_alterations[genes[i]]['del']))\n                            .attr('fill', '#0033CC')\n                            .attr('y', i * (rect_height)) \n                            .attr('x', xrange_gene(gene_alterations[genes[i]]['amp']) + xrange_gene(gene_alterations[genes[i]]['mut']) + stroke_width/2)\n                \n            }\n            \n            // This will set the axis and scale.\n            let xrange_axis = d3.scaleLinear() \n                                .domain([0, max_width])\n                                .range([0, xrange_gene(max_width)]);\n    \n            let x_axis = d3.axisTop()\n                            .scale(xrange_axis)\n                            .ticks(4)\n                            .tickSize(3)\n                            .tickFormat(d3.format('.0f'));\n    \n                svg.append('g')\n                    .attr('class', 'x_axis')\n                    .attr('fill', 'none')\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 1)\n                    .attr('transform', 'translate(' + (hmap_patients.length * rect_width + 20) + ' -0 )')\n                    .call(x_axis)\n                    .selectAll('text')\n                    .attr('fill', 'black')\n                    .style('font-size', 8)\n                    .attr('stroke', 'none');\n            \n                    svg.selectAll('.tick')\n                        .select('text')\n                        .attr('fill', 'black')\n                        .attr('stroke', 'none')\n\n            \n                                                         /** Horizontal Graph **/\n\n                                                         // calculating max height\n\n        let max_height_arr = []\n        for (let i = 0; i < patient_alterations.length; i++) { \n            max_height_arr.push(patient_alterations[i]['mut'] + patient_alterations[i]['amp'] + patient_alterations[i]['del'])\n        }\n    \n        let max_height = d3.max(max_height_arr)\n\n        let patient_alter = svg.append('g')\n                                .attr('id', 'patient-alter')\n    \n        let yrange_patient = d3.scaleLinear() // #TODO: scale.linear\n                                .domain([0, d3.max([maxPAmp, maxPMut, maxPHomdel])])\n                                .range([35, 0]);\n                        \n            for (let i = 0; i < patient_alterations.length; i++) {\n                patient_alter.append('rect')\n                            .attr('class', 'patient-rect mut')\n                            .attr('width', rect_width - 5)\n                            .attr('height', 35 - yrange_patient(patient_alterations[i]['mut']))\n                            .attr('fill', '#e41a1c')\n                            .attr('x', i * 20 + 1) \n                            .attr('y', yrange_patient(patient_alterations[i]['mut']))\n                            .attr('transform', 'translate(0,-40)')\n    \n                patient_alter.append('rect')\n                            .attr('class', 'patient-rect amp')\n                            .attr('width', rect_width - 5)\n                            .attr('height', 35 - yrange_patient(patient_alterations[i]['amp']))\n                            .attr('fill', '#1a9850')\n                            .attr('x', i * 20 + 1) \n                            .attr('y', yrange_patient(patient_alterations[i]['amp']) - (35 - yrange_patient(patient_alterations[i]['mut'])))\n                            .attr('transform', 'translate(0,-40)')\n                        \n                patient_alter.append('rect')\n                            .attr('class', 'patient-rect del')\n                            .attr('width', rect_width - 5)\n                            .attr('height', 35 - yrange_patient(patient_alterations[i]['del']))\n                            .attr('fill', '#0033CC')\n                            .attr('x', i * 20 + 1) \n                            .attr('y', yrange_patient(patient_alterations[i]['del']) - (35 - yrange_patient(patient_alterations[i]['mut'])) - (35 - yrange_patient(patient_alterations[i]['amp'])))\n                            .attr('transform', 'translate(0,-40)')\n                }\n    \n            let yrange_axis = d3.scaleLinear() \n                                .domain([0, max_height])\n                                .range([35 - yrange_patient(max_height), 0]).nice();\n    \n            let y_axis = d3.axisLeft()\n                            .scale(yrange_axis)\n                            .ticks(4)\n                            .tickSize(3)\n                            .tickFormat(d3.format('.0f'));\n    \n                svg.append('g')\n                    .attr('class', 'y_axis')\n                    .attr('fill', 'none')\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 1)\n                    .attr('transform', 'translate(-10,' + (-(35 - yrange_patient(max_height))-5) + ')')\n                    .call(y_axis)\n                    .selectAll('text')\n                    .attr('fill', 'black')\n                    .style('font-size', 8)\n                    .attr('stroke', 'none');\n            \n                    svg.selectAll('.tick')\n                        .select('text')\n                        .attr('fill', 'black')\n                        .attr('stroke', 'none')\n    \n        // removing the 0 tick\n        svg.selectAll('.y_axis .tick')\n            .each(function (d) {\n                if ( d === 0 ) {\n                    this.remove();\n                }\n        });\n\n        // dotted lines.\n        let lines = svg.append(\"g\")\n                        .attr(\"id\", \"lines\")\n                        .attr('transform', function(d,i) {\n                            return `translate(2,-200)`\n                        })\n        const temp = hmap_patients.slice(0)\n        temp.push(\"\")\n\n        lines.selectAll(\"line.dashed-line\")\n                .data(temp)\n                .enter()\n                    .append(\"line\")\n                    .attr(\"class\", \"dashed-line\")\n                    .attr(\"x1\", function(d,i) {\n                        return i * (rect_width) - 3;  \n                    })\n                    .attr(\"x2\", function(d,i) {\n                        return i * (rect_width) - 3;  \n                    })\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", 200)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .style(\"stroke-dasharray\", \"3 2\")\n                    .style(\"opacity\", 0.2)\n\n        lines.selectAll(\"rect.hlight-space\")\n                    .data(hmap_patients)\n                    .enter()\n                    .append('rect')\n                    .attr(\"class\", function(d) {\n                        return \"hlight-space-\" + d\n                    })\n                    .attr('width', rect_width - 2)\n                    .attr('height', 200)\n                    .attr('x', function(d,i) {\n                        return i * rect_width - 2;  \n                    })\n                    .attr(\"fill\", \"rgb(0,0,0)\")\n                    .attr('y', 0)\n                    .style(\"opacity\", 0)  \n\n                                                                                         /** SMALL RECTANGLES ON RIGHT SIDE OF Oncoprint **/\n        // This will create four rectangles on right side for alterations.\n        let target_rect = skeleton.append('g')\n                                    .attr('id', 'small_rectangle')\n\n                        target_rect.selectAll('rect')\n                                    .data(rect_alterations)\n                                    .enter()\n                                    .append('rect')\n                                    .attr('x', (hmap_patients.length * rect_width + 120))\n                                    .attr('y', function(d, i) {\n                                        return 200 + i * 25;\n                                    })\n                                    .attr('height', '15')\n                                    .attr('width', '15')\n                                    .attr('fill', function(d) {\n                                        if (d.color === \"none\") {\n                                            d3.select(this).attr(\"stroke\",'lightgray')\n                                                        .attr(\"transform\", \"translate(1,1)\")\n                                                        .attr(\"width\", 14)\n                                                        .attr(\"height\", 14)\n                                            return \"white\"\n                                        }\n                                        return d.color;\n                                    })\n\n                        target_rect.selectAll('text')\n                                    .data(rect_alterations)\n                                    .enter()\n                                    .append('text')\n                                    .attr('x', (hmap_patients.length * rect_width + 140))\n                                    .attr('y', function(d,i) {\n                                        return 212 + i * 25;\n                                    })\n                                    .text(function(d) {\n                                        return d.value;\n                                    })\n                                    .attr('font-size', '14px')\n\n\n        // highlight\n        for (let i = 0; i < genes.length; i++) {\n            for (let j = 0; j < hmap_patients.length; j++) {\n                highlight.append('rect')\n                        .attr('class', 'oprint-hlight-' + hmap_patients[j] + \" oprint-hlight-\" + genes[i])\n                        .attr('width', rect_width - 2)\n                        .attr('height', rect_height - 2)\n                        .attr('fill', 'black')\n                        .attr('x', j * (rect_width))\n                        .attr('y', i * (rect_height ))\n                        .style(\"opacity\", 0)\n                        .on(\"mouseover\", function(d,x) {\n                            d3.selectAll(\".hmap-hlight-\" + hmap_patients[j])\n                                .style(\"opacity\", 0.2)\n                            d3.selectAll(\".oprint-hlight-\" + hmap_patients[j])\n                                .style(\"opacity\", 0.2)\n                            d3.selectAll(\".hlight-space-\" + hmap_patients[j])\n                                .style(\"opacity\", 0.2)\n                        \n                        })\n                        .on(\"mouseout\", function(d,x) {\n                            d3.selectAll(\".hmap-hlight-\" + hmap_patients[j])\n                                .style(\"opacity\", 0)\n                            d3.selectAll(\".oprint-hlight-\" + hmap_patients[j])\n                                .style(\"opacity\", 0)\n                            d3.selectAll(\".hlight-space-\" + hmap_patients[j])\n                                .style(\"opacity\", 0)\n                        })\n            }\n        }                           \n                            \n    }\n\n    render() {\n        return (\n            <div ref = {node => this.node = node} className=\"oprint-wrapper\">\n            </div>\n        )\n    }\n}\n\n\nOncoprint.propTypes = {\n    genes: PropTypes.array.isRequired,\n    patient_id: PropTypes.array.isRequired,\n    hmap_patients: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired\n}\n\n\nexport default Oncoprint","import React from 'react'\nimport Oncoprint from './Oncoprint'\nimport axios from 'axios'\n\nclass OncoprintData extends React.Component {\n\n    constructor(props) {\n        //console.log(this.props)\n        super(props)\n        this.state = {\n            data : [],\n            genes : [],\n            patient_id : [],\n            hmap_patients: [],\n            dataset_param : 0\n        };\n        this.updateResults = this.updateResults.bind(this);\n    }\n\n    updateResults(onco, hmap) {\n        \n        const dataset = onco;\n        let gene_id = [];\n        let patient = [];\n        let hmap_patients = [];\n\n        Object.keys(dataset[0]).forEach(value => {\n            if(value !== 'gene_id') {\n                patient.push(value)\n            }\n        });\n\n        // grabbing the total patients from hmap.\n        hmap_patients = hmap.pop()\n\n        // genes\n        dataset.map((data) => {\n            return gene_id.push(data['gene_id']);\n        })\n        \n        this.setState({\n            data : dataset,\n            genes : gene_id,\n            patient_id : patient,\n            hmap_patients : hmap_patients\n        })\n    }\n\n    componentWillMount() {\n        this.setState ({\n            dataset_param : this.props.dataset\n        })\n    }\n\n    componentDidMount() {\n        if(this.state.dataset_param > 0) {\n            axios.get(`http://localhost:5000/api/v1/mutation/${this.state.dataset_param}`)\n             .then(response => {\n                axios.get(`http://localhost:5000/api/v1/response/${this.state.dataset_param}`)\n                    .then(hmap => {\n                        this.updateResults(response.data, hmap.data);\n                    })\n            })\n        } else {\n            axios.get(`http://localhost:5000/api/v1/mutation`)\n            .then(response => {\n                axios.get(`http://localhost:5000/api/v1/response/`)\n                    .then(hmap => {\n                        this.updateResults(response.data, hmap.data);\n                    })\n            })\n        }\n        \n    }\n\n    dimensions = {\n        height: 35,\n        width: 20,\n    }\n\n    margin = {\n        top: 100,\n        right: 200,\n        bottom: 0,\n        left: 250\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\" style={{margin:\"auto\", fontSize:\"0\"}}>\n                <Oncoprint \n                    data = {this.state.data} \n                    patient_id = {this.state.patient_id}\n                    hmap_patients = {this.state.hmap_patients}\n                    className = \"oprint\"\n                    genes = {this.state.genes} \n                    dimensions = {this.dimensions}\n                    margin = {this.margin}\n                />   \n            </div>    \n        )\n    }\n}\n\nexport default OncoprintData","import React from 'react';\n\n\nconst styles = {\n\tcolor: '#3453b0',\n\tfontSize: 18, \n\ttextAlign: 'center',\n    paddingTop: '30px',\n    minHeight: '50px',\n    bottom: '0',\n    right: '0',\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'absolute',\n    minWidth:'100vw',\n    backgroundColor: \"rgb(255,255,255,0.8)\",\n    fontFamily: 'sans-serif',\n   \n};\n\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div style={styles}>\n                ©BHKLab 2019\n            </div>\n        )\n    }\n}\n\n\n\nexport default Footer","import React, {Fragment} from 'react'\nimport HeatMapData from '../HeatMap/HeatMapData'\nimport OncoprintData from '../Oncoprint/OncoprintData'\nimport Footer from '../Footer/Footer'\n\nclass Dataset extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataset : 0\n        }\n    }\n\n    componentWillMount() {\n        let dataset_param = this.props.match.params.id\n        this.setState ({\n            dataset: dataset_param\n        })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <HeatMapData  \n                    dataset = {this.state.dataset}\n                />\n                <OncoprintData\n                    dataset = {this.state.dataset}\n                />\n                <Footer/>\n            </Fragment>\n        )\n    }\n}\n\n\n\nexport default Dataset","import React from 'react'\nimport * as d3 from 'd3'\nimport PropTypes from 'prop-types'\n\n\nclass DonutChart extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.DonutChart = this.DonutChart.bind(this);\n        this.makeDonutChart = this.makeDonutChart.bind(this);\n    }\n\n    componentDidMount() {\n        //this.DonutChart()\n    }\n\n    componentDidUpdate() {\n        this.DonutChart()\n    }\n\n    DonutChart() {\n        const node = this.node\n        const data = this.props.data\n        const height = this.props.dimensions.height\n        const width = this.props.dimensions.width\n        const left = this.props.margin.left\n        const top = this.props.margin.top\n        const bottom = this.props.margin.bottom\n        const right = this.props.margin.right\n        this.makeDonutChart(node, data, height, width, left, top, bottom, right)\n    }\n\n    // data should be like => {id: 'Gastric Cancer', value: 1007}\n    makeDonutChart(node, data, height, width, left, top, bottom, right) {\n        //console.log(data)\n        let chartId = this.props.chartId\n\n                                                /** SETTING SVG ATTRIBUTES **/\n        d3.select(\"svg\").remove()\n        // make the SVG element.\n        let svg = d3.select(node)\n                    .append('svg')\n                    .attr('id', 'donutchart-' + this.props.chartId)\n                    .attr('xmlns', 'http://wwww.w3.org/2000/svg')\n                    .attr('xmlns:xlink', 'http://wwww.w3.org/1999/xlink')\n                    .attr('height',height + top + bottom)\n                    .attr('width',width + left + right)\n                    .append('g')\n                    .attr('transform', 'translate(' + left + ',' + top + ')')\n        \n                                                /* Skeleton for the pie/donut chart */\n        // structure of the chart\n        let skeleton = svg.append('g')\n                          .attr('id', 'skeleton')\n\n                                                        /* Donut Chart */\n\n        // color scheme for the pie/donut chart using the ordinal scale.     \n        \n        let colors = [\"#E64B35FF\" ,\"#4DBBD5FF\" ,\"#00A087FF\" ,\"#3C5488FF\" ,\"#F39B7FFF\"  ,\"#8491B4FF\" ,\"#91D1C2FF\" ,\"#B09C85FF\"\n                        ,\"#0073C2FF\" ,\"#868686FF\" ,\"#CD534CFF\" ,\"#7AA6DCFF\" ,\"#003C67FF\" ,\"#3B3B3BFF\" ,\"#A73030FF\" ,\"#4A6990FF\"\n                       ,\"#00468BBF\" ,\"#42B540BF\" ,\"#0099B4BF\" ,\"#925E9FBF\" ,\"#FDAF91BF\" ,\"#AD002ABF\" ,\"#ADB6B6BF\"\n                     ]\n\n        let color = d3.scaleOrdinal()\n                      .domain(data)\n                      .range(colors);\n\n\n                                                        /* div element for the tooltip */\n        // create a tooltip\n        let tooltip = d3.select(node)\n                            .append('div')\n                            .style('position', 'absolute')\n                            .style('visibility', 'hidden')\n                            .style('border', 'solid')\n                            .style('border-width', '2px')\n                            .style('border-radius', '5px')\n                            .style('padding', '5px')\n                            .attr('top', 10)\n                            .attr('left', 20);\n\n\n                                                        /* Arc for the main pie chart and label arc */\n\n        // arc generator\n        let arc = d3.arc()\n                    .outerRadius(this.props.arc.outerRadius)\n                    .innerRadius(this.props.arc.innerRadius)\n\n        // this is used to set the labels\n        let labelArc = d3.arc()\n                         .outerRadius(this.props.arc.outerRadius - 20)\n                         .innerRadius(this.props.arc.innerRadius + 10)\n\n                                                             /* Pie/Donut chart layout */\n\n        // pie generator/layout\n        let pie = d3.pie()\n                    .sort(null)\n                    .value((d) => {\n                        return d.value;\n                    })\n        \n        // this will send the data to the pie generator and appending the class arc.\n        let arcs = skeleton.selectAll('.arc')\n                      .data(() => {\n                          return pie(data);\n                      })\n                      .enter()  \n                      .append('a')\n                      .attr('xlink:href', function(d,i) {\n                           if(chartId === 'donut_datasets') {\n                                return `/dataset/${data[i].parameter}`\n                           }\n                      })\n                      .append('g')\n                      .attr('class', (d) => {\n                          return (d.data.id).replace(/\\s/g,'').replace(/[(-)]/g, '') + '_Arc'\n                      })\n        \n        // here we are appending path and use of d element to create the path.\n        let piearc = arcs.append('path')\n                         .attr('d', arc)\n                         .attr('fill', (d) => {\n                            return color(d.data.value);\n                         })\n                         .attr('stroke', 'black')\n                         .style('stroke-width', '.5px')\n              \n        // transition of the arcs for the pie chart itself.\n        piearc.transition()\n                .ease(d3.easeLinear)\n                .duration(500)\n                .attrTween('d', pieTween);\n\n        function pieTween(b) {\n            b.innerRadius = 0;\n            let i = d3.interpolate({startAngle: 0, endAngle:0}, b);\n            return function(t) {\n                return arc(i(t))\n            }\n        }\n                       \n        // this is a very basic tooltip.\n                /*\n                piearc.append('title')\n                    .text((d) => {\n                        return 'value is ' + d.data.value\n                    })\n                */    \n                                                                        /* event listeners */\n\n        let mouseover = function(d) {\n            let selection = (d.data.id).replace(/\\s/g, '').replace(/[(-)]/g, '')\n            d3.select('.' + selection + '_Arc')\n                .transition()\n                .duration(300)\n                .style('opacity', 0.4)\n                .style('cursor', 'pointer')\n            // tooltip on mousever setting the div to visible.\n            tooltip\n                .style('visibility', 'visible')\n        }\n\n        let mousemove = function(d) {\n            let selection = (d.data.id).replace(/\\s/g, '').replace(/[(-)]/g, '')\n            d3.select('.' + selection + '_Arc')\n                .transition()\n                .duration(300)\n                .style('opacity', 0.4)\n                .style('cursor', 'pointer')\n            // tooltip grabbing event.pageX and event.pageY and set color according to the ordinal scale.\n            let value = ' (' + d.data.value + ')'\n            tooltip\n                .text([d.data.id + value])\n                .style('left', d3.event.pageX + 10 + 'px')\n                .style('top', d3.event.pageY + 10 + 'px')\n                .style('color', 'white')\n                .style('background-color', color(d.data.value))\n        }\n\n        let mouseout = function(d) {\n            let selection = (d.data.id).replace(/\\s/g, '').replace(/[(-)]/g, '')\n            d3.select('.' + selection + '_Arc')\n                .transition()\n                .duration(300)\n                .style('opacity', 1)\n                .style('cursor', 'pointer')\n            // tooltip on mouseout.\n            tooltip\n                .style('visibility', 'hidden')\n                .style('background-color', 'black')\n        }\n\n        // transition while mouseover and mouseout on each slice.\n          piearc.on('mouseover', (d) => {\n                       mouseover(d)\n                    })\n                    .on('mousemove', (d,i) => {\n                        mousemove(d)\n                    })\n                    .on('mouseout', (d) => {\n                       mouseout(d)\n                    })\n    \n                                                                    /* Label with event listeners */\n\n        // append the text labels.\n        if(this.props.chartId !== 'donut_drugs' && this.props.chartId !== 'donut_datasets' && this.props.chartId !== 'donut_tissues') {\n            arcs.append('text')\n                    .attr('transform', (d) => {\n                        return 'translate(' + labelArc.centroid(d) + ')'\n                    })\n                    .attr('dy', '0.35em')\n                    .text(d => {\n                        if (d.data.id === 'Non-small Cell Lung Carcinoma') {\n                            return 'NSCLC'\n                        }\n                        else { return d.data.id }\n                    })\n                    //.attr('font-weight', 'bold')\n                    .style('text-anchor', 'middle')\n                    .style('font-size', 14)\n                    .attr('fill', 'white')\n                    .on('mouseover', (d) => {\n                        mouseover(d)\n                    })\n                    .on('mousemove', (d) => {\n                        mousemove(d)\n                    })\n                    .on('mouseout', (d) => {\n                        mouseout(d)\n                    })             \n        }\n            \n                        \n\n                                                                    /**   Legends for the Donut Chart **/\n\n        // small side rectangles or legends for the donut chart.\n            let donut_rect = svg.append('g')\n                                     .attr('id', 'donut_small_rect')\n                            \n                            \n                            donut_rect.selectAll('rect')\n                                        .data(data)\n                                        .enter()\n                                        .append('rect')\n                                        .attr('x', (width) - 240)\n                                        .attr('y', function(d, i) {\n                                            return (-20 * i + (data.length)*10) - i * 8\n                                        })\n                                        .attr('width', 20)\n                                        .attr('height', 20)\n                                        .attr('fill', (d) => {\n                                            return color(d.value);\n                                        })\n\n                            donut_rect.selectAll('text')\n                                        .data(data)\n                                        .enter()\n                                        .append('text')\n                                        .attr('x', (width) - 200)\n                                        .attr('y', function(d, i) {\n                                            return (-20 * i + (data.length)*10) - i * 8 + 15\n                                        })\n                                        .attr('fill', (d) => {\n                                            return color(d.value)\n                                        })\n                                        .text(d => {\n                                            //console.log(d)\n                                            return d.id;\n                                        })              \n    }\n\n    render() {\n        return (\n            <div \n                ref = {node => this.node = node} \n                className = 'donut-chart'\n            >\n            </div>\n        )\n    }\n}\n\n\nDonutChart.propTypes = {\n    dimensions: PropTypes.object.isRequired,\n    margin: PropTypes.object.isRequired,\n    chartId: PropTypes.string.isRequired,\n    data: PropTypes.array.isRequired,\n    arc: PropTypes.object.isRequired\n}\n\nexport default DonutChart","import React, {Fragment} from 'react'\nimport DonutChart from '../DonutChart/DonutChart'\nimport axios from 'axios';\nimport styled from 'styled-components'\nimport Footer from '../Footer/Footer'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-top: 200px;\n    color: #3453b0;\n    margin-bottom: 100px;\n\n    h1 {\n        font-family:'Raleway', sans-serif;\n        font-weight:700;\n        text-align:center;\n    }\n`\n\nclass DatasetDonut extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data : []\n        }\n    }\n\n    componentDidMount() {\n        axios.get(`http://localhost:5000/api/v1/dataset/patients`)\n            .then((response) => {\n                response = response.data.data.map((element) => {\n                    return ({\n                        id: element.dataset_name,\n                        value: element.patient_id,\n                        parameter: element.dataset_id\n                    })\n                })\n                this.setState({\n                    data: response\n                })\n            })\n    }\n\n    dimensions = {\n        width: 650,\n        height: 250\n    }\n\n    margin = {\n        top: 320,\n        right: 100,\n        bottom: 100,\n        left: 380\n    }\n\n    arc = {\n        outerRadius: 260,\n        innerRadius: 150\n    }\n\n    chartId = 'donut_datasets'\n\n    render() {\n        return (\n            <Fragment>\n                <Wrapper>\n                    <div className=\"donut-wrapper\">\n                        <h1> Number of Patient IDs Per Dataset </h1>\n                        <DonutChart \n                            dimensions = {this.dimensions} \n                            margin = {this.margin} \n                            chartId = {this.chartId} \n                            data = {this.state.data}\n                            arc = {this.arc}\n                        />\n                    </div>\n                </Wrapper>\n                <Footer/>\n            </Fragment>\n        )\n    }\n}\n\n\nexport default DatasetDonut","import React from 'react'\n\n\nclass Documentation extends React.Component {\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"doc-wrapper\">\n                    <h1> Documentation will be added Later. </h1>\n                </div>\n                \n            </div>\n            \n        )\n    }\n}\n\n\nexport default Documentation","import styled from 'styled-components'\n\n\nconst TableWrapper = styled.div`\n    padding:10px 20px 30px 20px;\n\n    .ReactTable * {\n        box-sizing: border-box;\n    }\n\n    .ReactTable .rt-table {\n        align-items: stretch;\n        width: 100%;\n        border-collapse: collapse;\n        overflow: auto\n    }\n\n    .ReactTable .rt-thead {\n        color:  #3453b0;\n        font-size: 18px;\n        font-weight: 600;\n    }\n\n    .ReactTable .rt-thead .rt-tr {\n        text-align: center\n    }\n\n    .ReactTable .rt-tbody{\n        color:  #3453b0;\n        font-size: 16px;\n    }\n\n    .-previous, .-next, .-btn {\n      background: #3453b0;\n      color:white !important;\n    }\n\n    .ReactTable .-pagination .-pageJump input{\n        color: #3453b0;\n    }\n`\n\n\nexport default TableWrapper","import React, {Fragment} from 'react'\nimport axios from 'axios'\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\nimport TableWrapper from './DrugTableStyle'\n\n\nvar h1Style = {\n  color: '#3453b0',\n  margin: '50px'\n}\n\nclass DrugTable extends React.Component {\n\n    constructor(props) {\n      super(props) \n      //setting the states for the data.\n      this.state = {\n        data: []\n      }\n    }\n\n    componentDidMount() {\n      axios.get(`http://localhost:5000/api/v1/drugs`)\n            .then(response => {\n                this.setState ({\n                  data: response.data\n                })\n            })\n    }\n\n    render() {\n      const data = this.state.data\n\n      const columns = [\n        {\n          Header: 'Drug',\n          accessor: 'drug_id',\n          minWidth: 180,\n          //Cell: props => props.value.toUpperCase(),\n          sortable: true\n        }, \n        //{\n        //  Header: 'StandardName',\n        //  accessor: 'standard_name',\n        //  minWidth: 180,\n        //  Cell: props => props.value.toUpperCase()\n        //}, \n        {\n          Header: 'TreatmentType',\n          accessor: 'treatment_type',\n          minWidth: 150\n        },\n        //{\n        //  Header: 'PubchemID',\n        //  accessor: 'pubchemId',\n        //},\n        //{\n        //  Header: 'Class',\n        //  accessor: 'class',\n        //  minWidth: 230\n        //},\n        {\n          Header: 'Class',\n          accessor: 'class_name',\n          minWidth: 230\n        },\n        {\n          Header: 'Targets',\n          accessor: 'targets',\n          minWidth: 150\n        },\n        {\n          Header: 'Source',\n          accessor: 'source',\n        }\n      ]\n      \n        return (\n          <Fragment>\n            <h1 style = {h1Style}> Drug Table </h1>\n            <TableWrapper className='wrap'>\n              <ReactTable\n                data = {data}\n                columns = {columns}\n                className = \"-highlight\"\n                defaultPageSize = {10}\n                filterable\n              /> \n            </TableWrapper>         \n          </Fragment>\n        )\n    }\n\n}\n \nexport default DrugTable","import React, {Fragment} from 'react'\nimport DonutChart from '../DonutChart/DonutChart'\nimport Footer from '../Footer/Footer'\nimport DrugTable from './DrugTable'\nimport axios from 'axios'\nimport styled from 'styled-components'\n\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-top: 200px;\n    margin-bottom: 100px;\n    color: #3453b0\n\n    h1 {\n        font-family:'Raleway', sans-serif;\n        font-weight:700;\n        text-align:center;\n    }\n`\n\nclass DonutDrug extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data : []\n        }\n    }\n\n    componentDidMount() {\n        let new_values = []\n        axios.get(`http://localhost:5000/api/v1/drug/class`)\n             .then((response) => {\n                 response.data.data.forEach((data) => {\n                     let value = {}\n                     if(data.class_name !== '') {\n                        value['id'] = (data.class_name).replace('\"', '').replace(\"/\", \"_\")\n                        value['value'] = data.model_ids\n                        new_values.push(value)\n                     }\n                 })\n                 this.setState({\n                     data : new_values\n                 })\n             })\n             \n    }\n\n    dimensions = {\n        width: 600,\n        height: 250\n    }\n\n    margin = {\n        top: 320,\n        right: 100,\n        bottom: 100,\n        left: 380\n    }\n\n    arc = {\n        outerRadius: 260,\n        innerRadius: 150\n    }\n\n    chartId = 'donut_drugs'\n\n    render() {\n        return (\n            <Fragment>\n                <Wrapper>\n                    <div className=\"donut-wrapper\">\n                        <h1> Number of Model IDs Per Drug class </h1>\n                        <DonutChart \n                            dimensions = {this.dimensions} \n                            margin = {this.margin} \n                            chartId = {this.chartId} \n                            data = {this.state.data}\n                            arc = {this.arc}\n                        />\n                    </div>\n                    <div className=\"donut-wrapper\">\n                        <DrugTable/>\n                    </div>\n                </Wrapper>\n                <Footer/>\n            </Fragment>\n        )\n    }\n}\n\nexport default DonutDrug","import React from 'react'\nimport DonutChart from './DonutChart'\nimport axios from 'axios'\n\n                                                    // This code is not being used anywhere for now //\nclass DonutPatient extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data : []\n        }\n    }\n\n    componentDidMount() {\n        let new_values = []\n        const promise1 = axios.get(`http://localhost:5000/api/v1/getinboth`);\n        const promise2 = axios.get(`http://localhost:5000/api/v1/getonlydrug`);\n        const promise3 = axios.get(`http://localhost:5000/api/v1/getonlysequencing`);\n\n        Promise.all([promise1, promise2, promise3])\n             .then((response) => {\n                let i = 1;\n                response.forEach((data) => {\n                    if(data.data.length !== 0) {\n                        let value = {}\n                        if (i===1) {\n                            value['id'] = 'Sequence and Drug Data'\n                        } else if (i===2) {\n                            value['id'] = 'Only Drug Data'\n                        } else if (i===3) {\n                            value['id'] = 'Only Sequence Data'\n                        }\n                        i++;\n                        value['value'] = data.data.length;\n                        new_values.push(value)\n                    }\n                })\n                this.setState({\n                    data : new_values\n                })\n             })\n    }\n\n    dimensions = {\n        width: 130,\n        height: 80\n    }\n\n    margin = {\n        top: 220,\n        right: 100,\n        bottom: 100,\n        left: 250\n    }\n\n    arc = {\n        outerRadius: 160,\n        innerRadius: 70\n    }\n\n    chartId = 'donut_patient'\n\n    render() {\n        return (\n            <div className='DonutPatient'>\n                <DonutChart \n                    dimensions = {this.dimensions} \n                    margin = {this.margin} \n                    chartId = {this.chartId} \n                    data = {this.state.data}\n                    arc = {this.arc}\n                />\n            </div>\n        )\n    }\n}\n\nexport default DonutPatient","import React, {Fragment} from 'react'\nimport DonutChart from '../DonutChart/DonutChart'\nimport Footer from '../Footer/Footer'\nimport axios from 'axios'\nimport styled from 'styled-components'\n\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-top: 200px;\n    color: #3453b0;\n    margin-bottom: 100px;\n\n    h1 {\n        font-family:'Raleway', sans-serif;\n        font-weight:700;\n        text-align:center;\n    }\n`\n\n\nclass DonutTissue extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            data : []\n        }\n    }\n\n    componentDidMount() {\n        let new_values = []\n        axios.get(`http://localhost:5000/api/v1/tissue/patients`)\n             .then((response) => {\n                 response.data.data.forEach((data) => {\n                     let value = {}\n                     value['id'] = data.tissue_name\n                     value['value'] = data.total\n                     new_values.push(value)\n                 })\n                 this.setState({\n                     data : new_values\n                 })\n             })\n    }\n\n   \n    dimensions = {\n        width: 600,\n        height: 300\n    }\n\n    margin = {\n        top: 320,\n        right: 100,\n        bottom: 100,\n        left: 380\n    }\n\n    arc = {\n        outerRadius: 280,\n        innerRadius: 150\n    }\n\n    chartId = 'donut_tissues'\n\n    render() {\n        return (\n            <Fragment>\n                <Wrapper>\n                    <div className=\"donut-wrapper\">\n                        <h1> Number of Model IDs Per Tissue Type </h1>\n                        <DonutChart \n                            dimensions={this.dimensions} margin={this.margin} \n                            chartId={this.chartId} data={this.state.data}\n                            arc={this.arc}\n                        />\n                    </div>\n                </Wrapper>\n                <Footer/>\n            </Fragment>\n        )\n    }\n}\n\nexport default DonutTissue","import styled from 'styled-components'\n\nconst StyleBar = styled.div`\n    margin-top: 30vh;\n    font-family: \"Raleway\", sans-serif;\n    display:flex;\n    margin:auto;\n    \n    .search-container {\n        max-width: 1000px;\n        text-align:center;\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-around;\n        align-items: center;\n        border-radius:25px;\n        max-height: 700px;\n    }\n\n    .select-component {\n        background: rgb(255,255,255,0.8);\n        width: 45%;\n        min-width: 750px;\n        margin-top: 0px;\n        max-height: 600px;\n        display: flex;\n        flex-wrap: wrap;\n        margin: 35px;\n        padding: 15px 25px 50px 25px;\n        justify-content: space-around;\n        border-radius: 20px;\n\n        .div-dataset, .div-drug {\n            max-width: 49%;\n            min-width: 295px;\n        }\n        .div-genomics, .div-gene{\n            margin: 10px;\n            min-width: 600px;\n            max-width: 70%;\n        }\n\n        .div-gene-enter{\n            margin: 15px;\n            min-width: 620px;\n            min-height: 180px;\n                input {\n                    min-width: 600px;\n                    min-height: 150px;\n                    outline-style: none;\n                    border-radius: 10px;\n                    color: #3453b0;\n                    font-weight: 300;\n                    font-size: 16px;\n                    border: 1px solid #3453b0;\n                    padding: 20px;\n                    box-sizing: border-box;\n                }\n        }\n    }\n\n    .two-col {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-around;\n        align-items: flex-end;\n        min-width: 610px;\n        max-width: 70%;\n        margin-bottom:10px;\n    }\n\n    h1 {\n      color: #3453b0;\n      text-align: center;\n      font-size: 36px;\n    }    \n\n   @media screen and (max-width: 1500px) {\n        h1 {\n            font-size: 28px;\n        }\n        .select-component {\n            width: 55%;\n            max-height: 400px;\n        }\n        .search-container {\n            max-height: 500px;\n        }\n        .div-gene-enter {\n            min-height: 100px !important;\n            margin: 10px !important;\n            input {\n                min-height: 100px !important;\n                max-height: 100px;\n            }\n        }\n        .div-genomics, .div-gene {\n            margin: 5px !important;\n        }\n   }\n\n   @media screen and (max-width: 650px) {\n       h1 {\n           font-size: 18px;\n       }\n   }\n`;\n\n\nconst StyleButton = styled.button`\n    background-color: #3453b0;\n    border: none;\n    border-radius:6px;\n    color: #ffffff;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 32px;\n    font-family: \"Raleway\", sans-serif; \n    font-weight:700;\n    margin: auto;\n    transition: .3s;\n    outline-style: none;\n    margin-top: 10px;\n    &:hover {\n        opacity: 1;\n        cursor: pointer;\n        color:  #3453b0;\n        background-color: #ffffff;\n        border: 1px solid #3453b0;\n    }\n`;\n\n\nconst customStyles = {\n    placeholder: (provided) => ({\n          ...provided,\n          color: '#3453b0',\n          fontWeight:'400',\n          fontSize: '15px'\n    }),\n\n    control: (provided) => ({\n        ...provided,\n        '&:hover': { borderColor: '#3453b0' },\n        border: '1px solid #3453b0',\n        boxShadow: 'none',\n        padding: '0px 5px',\n        borderRadius: '5px',\n        background: 'rgb(255,255,255,0.7)',\n    }),\n\n    indicatorSeparator: (provided) => ({\n        ...provided,\n        background: '#3453b0',\n        '&:hover': { background: '#3453b0'},\n        height: '30px'\n    }), \n    \n    dropdownIndicator: (provided ) => ({\n        ...provided,\n        color: '#3453b0',\n        '&:hover': {\n          color: '#3453b0',\n          cursor: 'pointer'\n        }\n    }),\n\n    option: (provided) => ({\n        ...provided,\n        color: '#3453b0',\n        background: '#ffffff',\n        margin: '5px 0px',\n        '&:hover': {\n          background: '#fee8c8'\n        },\n        fontSize: '14px'\n    }),\n\n    singleValue: (provided) => ({\n        ...provided,\n        color: '#3453b0',\n        fontSize: '16px'\n    }),\n\n    input: (provided) => ({\n        ...provided,\n        color: '#3453b0',\n    }),\n\n    clearIndicator: (provided) => ({\n        ...provided,\n        color: '#3453b0',\n        '&:hover': {\n          color: '#3453b0',\n        }\n    })\n}\n\n\n\nexport {\n    StyleBar,\n    customStyles,\n    StyleButton\n}","export const GeneList = [\n            'Prostate Cancer: AR Signaling=SOX9 RAN TNK2 EP300 PXN NCOA2 AR NRIP1 NCOR1 NCOR2',\n            'Prostate Cancer: AR and steroid synthesis enzymes=AKR1C3 AR CYB5A CYP11A1 CYP11B1 CYP11B2 CYP17A1 CYP19A1 CYP21A2 HSD17B1 HSD17B10 HSD17B11 HSD17B12 HSD17B13 HSD17B14 HSD17B2 HSD17B3 HSD17B4 HSD17B6 HSD17B7 HSD17B8 HSD3B1 HSD3B2 HSD3B7 RDH5 SHBG SRD5A1 SRD5A2 SRD5A3 STAR',\n            'Prostate Cancer: Steroid inactivating genes=AKR1C1 AKR1C2 AKR1C4 CYP3A4 CYP3A43 CYP3A5 CYP3A7 UGT2B15 UGT2B17 UGT2B7',\n            'Prostate Cancer: Down-regulated by androgen=BCHE CDK8 CTBP1 ACKR3 DDC DPH1 FN1 HES6 MMP16 MYC PEG3 PIK3R3 PRKD1 SCNN1A SDC4 SERPINI1 SLC29A1 ST7 TULP4',\n            'Glioblastoma: TP53 Pathway=CDKN2A MDM2 MDM4 TP53',\n            'Glioblastoma: RTK/Ras/PI3K/AKT Signaling=EGFR ERBB2 PDGFRA MET KRAS NRAS HRAS NF1 SPRY2 FOXO1 FOXO3 AKT1 AKT2 AKT3 PIK3R1 PIK3CA PTEN',\n            'Glioblastoma: RB Pathway=CDKN2A CDKN2B CDKN2C CDK4 CDK6 CCND2 RB1',\n            'Ovarian Cancer: Oncogenes associated with epithelial ovarian cancer=RAB25 MECOM EIF5A2 PRKCI PIK3CA KIT FGF1 MYC EGFR NOTCH3 KRAS AKT1 ERBB2 PIK3R1 CCNE1 AKT2 AURKA',\n            'Ovarian Cancer: Putative tumor-suppressor genes in epithelial ovarian cancer=DIRAS3 RASSF1 DLEC1 SPARC DAB2 PLAGL1 RPS6KA2 PTEN OPCML BRCA2 ARL11 WWOX TP53 DPH1 BRCA1 PEG3',\n            'General: Cell Cycle Control=RB1 RBL1 RBL2 CCNA1 CCNB1 CDK1 CCNE1 CDK2 CDC25A CCND1 CDK4 CDK6 CCND2 CDKN2A CDKN2B MYC CDKN1A CDKN1B E2F1 E2F2 E2F3 E2F4 E2F5 E2F6 E2F7 E2F8 SRC JAK1 JAK2 STAT1 STAT2 STAT3 STAT5A STAT5B',\n            'General: p53 signaling=TP53 MDM2 MDM4 CDKN2A CDKN2B TP53BP1',\n            'General: Notch signaling=ADAM10 ADAM17 APH1A APH1B ARRDC1 CIR1 CTBP1 CTBP2 CUL1 DLL1 DLL3 DLL4 DTX1 DTX2 DTX3 DTX3L DTX4 EP300 FBXW7 HDAC1 HDAC2 HES1 HES5 HEYL ITCH JAG1 JAG2 KDM5A LFNG MAML1 MAML2 MAML3 MFNG NCOR2 NCSTN NOTCH1 NOTCH2 NOTCH3 NOTCH4 NRARP NUMB NUMBL PSEN1 PSEN2 PSENEN RBPJ RBPJL RFNG SNW1 SPEN HES2 HES4 HES7 HEY1 HEY2',\n            'General: DNA Damage Response=CHEK1 CHEK2 RAD51 BRCA1 BRCA2 MLH1 MSH2 ATM ATR MDC1 PARP1 FANCF',\n            'General: Other growth / proliferation signaling=CSF1 CSF1R IGF1 IGF1R FGF1 FGFR1 AURKA DLEC1 PLAGL1 OPCML DPH1',\n            'General: Survival / cell death regulation signaling=NFKB1 NFKB2 CHUK DIRAS3 FAS HLA-G BAD BCL2 BCL2L1 APAF1 CASP9 CASP8 CASP10 CASP3 CASP6 CASP7 GSK3B ARL11 WWOX PEG3 TGFB1 TGFBR1 TGFBR2',\n            'General: Telomere maintenance=TERC TERT',\n            'General: RTK signaling family=EGFR ERBB2 ERBB3 ERBB4 PDGFA PDGFB PDGFRA PDGFRB KIT FGF1 FGFR1 IGF1 IGF1R VEGFA VEGFB KDR',\n            'General: PI3K-AKT-mTOR signaling=PIK3CA PIK3R1 PIK3R2 PTEN PDPK1 AKT1 AKT2 FOXO1 FOXO3 MTOR RICTOR TSC1 TSC2 RHEB AKT1S1 RPTOR MLST8',\n            'General: Ras-Raf-MEK-Erk/JNK signaling=KRAS HRAS BRAF RAF1 MAP3K1 MAP3K2 MAP3K3 MAP3K4 MAP3K5 MAP2K1 MAP2K2 MAP2K3 MAP2K4 MAP2K5 MAPK1 MAPK3 MAPK4 MAPK6 MAPK7 MAPK8 MAPK9 MAPK12 MAPK14 DAB2 RASSF1 RAB25',\n            'General: Regulation of ribosomal protein synthesis and cell growth=RPS6KA1 RPS6KA2 RPS6KB1 RPS6KB2 EIF5A2 EIF4E EIF4EBP1 RPS6 HIF1A',\n            'General: Angiogenesis=VEGFA VEGFB KDR CXCL8 CXCR1 CXCR2',\n            'General: Folate transport=SLC19A1 FOLR1 FOLR2 FOLR3 IZUMO1R',\n            'General: Invasion and metastasis=MMP1 MMP2 MMP3 MMP7 MMP9 MMP10 MMP11 MMP12 MMP13 MMP14 MMP15 MMP16 MMP17 MMP19 MMP21 MMP23B MMP24 MMP25 MMP26 MMP27 MMP28 ITGB3 ITGAV PTK2 CDH1 SPARC WFDC2'\n]\n\n\nexport default {\n    GeneList\n}","import React from 'react'\nimport { withRouter } from 'react-router-dom';\nimport {StyleBar, customStyles, StyleButton} from './SearchStyle'\nimport Select from 'react-select'\nimport axios from 'axios'\nimport { GeneList } from './GeneList'\n\n\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data : [],\n            datasets: [],\n            genes: [],\n            selectedGeneSearch: ['Enter Gene Symbol(s)'],\n            selectedDrugs: [],\n            selectedDataset: '' ,\n            genomics: ['Mutation', 'CNV', 'RNASeq'],\n            allDrugs: []\n        }\n        this.handleDrugChange = this.handleDrugChange.bind(this)\n        this.handleDatasetChange = this.handleDatasetChange.bind(this)\n        this.handleGeneListChange = this.handleGeneListChange.bind(this)\n        this.handleGeneSearchChange = this.handleGeneSearchChange.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.redirectUser = this.redirectUser.bind(this)\n    } \n\n    axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json'\n        }\n    };\n\n    componentWillMount() {\n        const genes = GeneList.map(item => ({\n            value: item.split('=')[1].replace(/\\s/g, \",\"),\n            label: item.split('=')[0]\n        }))\n        this.setState ({\n            genes: [{value: 'user defined list', label: 'User-Defined List'}, ...genes]\n        })\n        \n        const genomic = this.state.genomics.map((item, i) => {\n            return ({\n                label: item,\n                value: i\n            })\n        })\n        this.setState({\n            genomics: [...genomic]\n        })\n    }\n\n    componentDidMount() {\n        axios.get(`http://localhost:5000/api/v1/datasets`)\n            .then((response) => {\n                const datasets = response.data.data.map(item => ({\n                        value: item.dataset_id,\n                        label: item.dataset_name\n                }))\n                this.setState ({\n                datasets: [...datasets]\n                })\n            })\n    }\n\n\n    handleDrugChange = (selectedOption, action) => {\n        if(selectedOption[0].value === 'all') {\n            this.setState ({\n                selectedDrugs : this.state.allDrugs\n            })\n        }\n        else if (selectedOption !== null && selectedOption.length > 0) {\n            const label = selectedOption.map((value) => {\n                return (value.label).replace(/\\s/g,'').replace('+','_');\n            })\n            this.setState ({\n                selectedDrugs : label\n            })\n        }\n    }\n\n    handleDatasetChange = selectedOption => {\n        this.setState({\n            selectedDataset: selectedOption.value\n        })\n        const label = selectedOption.value\n        let initial = 1;\n        axios.post(`http://localhost:5000/api/v1/drugpatient/dataset`, {label}, this.axiosConfig)\n             .then((response) => {\n                console.log(response)\n                const data = response.data.data[0].map(item => ({\n                    value: initial++,\n                    label: item.drug\n                }))\n                this.setState ({\n                    data: [ {value: 'all', label:'All'}, ...data]\n                })\n                const drug = response.data.data[0].map(item => {\n                    return (item.drug).replace(/\\s/g,'').replace('+','_');\n                })\n                this.setState ({\n                    allDrugs: [...drug]\n                })\n             })\n    }\n\n\n    handleGeneListChange = selectedOption => {\n        if(selectedOption.value === 'user defined list') {\n            this.setState({\n                selectedGeneSearch: ''\n            })\n        } else {\n            this.setState({\n                selectedGeneSearch: selectedOption.value\n            })\n        }\n    }\n\n\n    handleGeneSearchChange = (event) => {\n        this.setState({\n            selectedGeneSearch: event.target.value\n        })\n    }\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n           this.redirectUser()\n        }\n    }\n\n    redirectUser = () => {\n        if((this.state.selectedDataset !== '') && (this.state.selectedDrugs.length > 0) && (this.state.selectedGeneSearch[0] !== 'Enter Gene Symbol(s)')) {\n            const { history } = this.props\n            history.push(`/search/?drug=${this.state.selectedDrugs}&dataset=${this.state.selectedDataset}&genes=${this.state.selectedGeneSearch}`)\n        }\n    }\n\n    render() {\n        return (\n            <StyleBar className='wrapper'>\n                <div className='search-container'>\n                    <div className='select-component' onKeyPress={this.handleKeyPress}>\n                        <h1> <span>XevaDB:</span> A Database For PDX Pharmacogenomic Data </h1>\n                        <div className='two-col'>\n                            <div className='div-dataset'>\n                                <Select \n                                    options={this.state.datasets} \n                                    styles={customStyles}\n                                    placeholder={'Select the datasets'}\n                                    onChange={this.handleDatasetChange}\n                                />\n                            </div>\n                            <div className='div-drug'>\n                                <Select \n                                    options={this.state.data} \n                                    styles={customStyles}\n                                    placeholder={'Search for Drug (eg. CLR457)'}\n                                    onChange={this.handleDrugChange}\n                                    isMulti\n                                    isSearchable\n                                    isClearable\n                                />\n                            </div>\n                        </div>\n                        \n                        <div className='div-genomics'> \n                            <Select \n                                options={this.state.genomics} \n                                styles={customStyles}\n                                placeholder={'Genomics'}\n                            />\n                        </div>\n\n                        <div className='div-gene'>\n                            <Select \n                                options={this.state.genes} \n                                styles={customStyles}\n                                placeholder={'User Defined List'}\n                                onChange={this.handleGeneListChange}\n                            />\n                        </div>\n\n                        <div className='div-gene-enter'>\n                            <form>\n                                <input\n                                    type=\"text\" \n                                    value={this.state.selectedGeneSearch} \n                                    onChange={this.handleGeneSearchChange}\n                                />\n                            </form>\n                        </div>\n                        <div>\n                            <StyleButton onClick={this.redirectUser} type='button'> \n                                <span>\n                                    Search\n                                </span>\n                            </StyleButton>\n                        </div>       \n                    </div>\n                </div>\n            </StyleBar>\n        )\n    }\n}\n\n\nexport default withRouter(Search)\n","import styled from 'styled-components'\n\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n`\n\nexport default Container","import React from 'react'\nimport Search from '../Search/Search'\nimport CounterNav from '../CounterNav/CounterNav'\nimport Container from './HomeStyle'\n\n\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Search/>\n                <CounterNav/>\n            </Container>\n        )\n    }\n}\n\n\nexport default Home","import React from 'react'\nimport axios from 'axios'\nimport Oncoprint from '../Oncoprint/Oncoprint'\n\n\n\nclass SearchResultOncoprint extends React.Component {\n\n    constructor(props) {\n        super(props)\n        //setting the states for the data.\n        this.state = {\n            patient_id : [],\n            gene_id: [],\n            gene_data: [],\n            heatmap_patients: [],\n        };\n        //binding the functions declared.\n        this.updateResults = this.updateResults.bind(this);\n    }\n\n    updateResults(result, heatmap) {\n        console.log('result is here', result)\n        const datasets = result;\n        let gene = [];\n        let patient = [];\n        let heatmap_patients = [];\n        \n        patient = Object.keys(datasets[0]);\n        patient.shift();\n\n        heatmap_patients = Object.keys(heatmap[0]);\n        heatmap_patients.shift();\n\n        datasets.map((data) => {\n            return gene.push(data['gene_id']);\n        })\n        \n        this.setState({\n            gene_data : datasets,\n            gene_id : gene,\n            patient_id : patient,\n            heatmap_patients : heatmap_patients\n        })\n    }\n\n    componentDidMount() {\n        let dataset_param = this.props.dataset_param\n        let gene_param = this.props.gene_param\n        let drug_for_onco = this.props.drug_for_onco\n        \n        axios.get(`http://localhost:5000/api/v1/mutation?genes=${gene_param}&dataset=${dataset_param}`)\n            .then(response => {\n                axios.get(`http://localhost:5000/api/v1/response?drug=${drug_for_onco}&dataset=${dataset_param}`)\n                .then(heatmap_patient => {\n                    this.updateResults(response.data, heatmap_patient.data);\n                })\n            })\n    }\n\n    dimensions = {\n        height: 35,\n        width: 20,\n    }\n\n    margin = {\n        top: 100,\n        right: 200,\n        bottom: 200,\n        left: 250\n    }\n\n    render() {\n        return (\n            <Oncoprint \n                data = {this.state.gene_data}\n                patient_id = {this.state.patient_id}\n                genes = {this.state.gene_id} \n                dimensions = {this.dimensions}\n                margin = {this.margin}\n                hmap_patients = {this.state.heatmap_patients}\n            />\n        )\n    }\n}\n\n\n\nexport default SearchResultOncoprint\n","import React from 'react'\nimport HeatMap from '../HeatMap/HeatMap'\nimport axios from 'axios'\n\n\nclass SearchResultHeatMap extends React.Component {\n\n    constructor(props) {\n        super(props)\n        //setting the states for the data.\n        this.state = {\n            drug_data : [],\n            patient_id_drug : [],\n            drug_id : [],\n            dataset_param : 0\n        };\n        //binding the functions declared.\n        this.parseData = this.parseData.bind(this);\n    }\n\n    // this function takes the parsed result and set the states.\n    parseData(result) {\n      \n        // defining the variables.\n        let dataset = []\n        let patient = []\n        let drug = []\n\n        //patient array.\n        patient = result.pop()\n        \n        // this function will loop through the elements and\n        // assign empty values in case model information is not available.\n        result.forEach(element => {\n            let data_object = {}\n            drug.push(element.Drug)\n            patient.forEach((patient) => {\n                if(!element[patient]) {\n                    data_object[patient] = ''\n                } else {\n                    data_object[patient] = element[patient]\n                }\n            })\n            dataset.push(data_object)\n        });\n\n        //setting the states using the defined variables.\n        this.setState({\n            drug_id : drug,\n            patient_id_drug : patient,\n            drug_data: dataset\n        })\n    }\n\n    componentDidMount() {\n        let drug_param = this.props.drug_param\n        let dataset_param = this.props.dataset_param\n        \n        axios.get(`http://localhost:5000/api/v1/response?drug=${drug_param}&dataset=${dataset_param}`)\n             .then(response => {\n                 this.parseData(response.data);\n             })\n    }\n\n    dimensions = {\n        height: 35,\n        width: 20,\n    }\n\n    margin = {\n        top: 300,\n        right: 200,\n        bottom: 100,\n        left: 250\n    }\n\n    render() {\n        return (\n            <HeatMap\n                data = {this.state.drug_data} \n                drug_id = {this.state.drug_id} \n                patient_id = {this.state.patient_id_drug} \n                dimensions = {this.dimensions}\n                margin = {this.margin}\n                class = \"searchedHeatMap\"\n            />\n        )\n    }\n}\n\n\n\nexport default SearchResultHeatMap\n","import React, {Fragment} from 'react'\nimport SearchResultOncoprint from './SearchResultOncoprint'\nimport SearchResultHeatMap from './SearchResultHeatMap'\n\nclass SearchResult extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            drug_param : '',\n            dataset_param : '',\n            gene_param : '',\n            drug_param_for_onco : ''\n        }\n    }\n\n    componentWillMount() {\n        let params = new URLSearchParams(this.props.location.search);\n        let drug = params.get('drug')\n        let dataset = params.get('dataset')\n        let gene = params.get('genes')\n        let drug_for_onco = drug.split(',')[0]\n        this.setState({\n            drug_param : drug,\n            dataset_param : dataset,\n            gene_param: gene,\n            drug_param_for_onco: drug_for_onco\n        })\n    }\n       \n    render() {\n        return (\n            <Fragment>\n                <div className=\"wrapper\" style={{margin:\"auto\", fontSize:\"0\"}}>\n                    <SearchResultHeatMap \n                        drug_param = {this.state.drug_param} \n                        dataset_param = {this.state.dataset_param}\n                    />\n                    <SearchResultOncoprint \n                        gene_param = {this.state.gene_param} \n                        dataset_param = {this.state.dataset_param} \n                        drug_for_onco = {this.state.drug_param_for_onco}\n                    />\n                </div>\n            </Fragment>\n        )\n    }\n}\n\n\n\nexport default SearchResult","import styled from 'styled-components'\n\nconst HeaderStyle = styled.header`\n    *{\n        margin: 0px;\n        padding: 0px;\n        box-sizing: border-box;\n    }\n\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    min-height: 80px;\n    max-height: 100px;\n    font-family: 'Raleway', sans-serif;\n    background-color: rgb(255,255,255,0.8);\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n`;\n\nconst LinkStyle = styled.div`\n    display: flex;\n    justify-content: space-around;\n    width: 60%;\n\n    a {\n        color: #3453b0;\n        text-decoration: none;\n        letter-spacing:1px;\n        font-family: 'Raleway', sans-serif;\n        font-weight:700;\n        font-size: 24px;\n        &:hover {\n            color: #e5ac11;\n            cursor:pointer;\n        }\n    }\n\n    a:nth-child(1) {\n        margin-left : 200px;\n    }\n\n    @media screen and (max-width: 1500px) {\n        a {\n            font-size: 21px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 100px;\n        }\n    }\n\n    @media screen and (max-width: 1300px) {\n        a {\n            font-size: 18px;\n        }\n        \n        a:nth-child(1) {\n            margin-left : 10px;\n        }\n    }\n\n    @media screen and (max-width: 1000px) {\n        a {\n           font-size: 14px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 0px;\n        }\n    }\n\n    @media screen and (max-width: 700px) {\n        a {\n           font-size: 10px;\n        }\n\n        a:nth-child(1) {\n            margin-left : 0px;\n        }\n    }\n`\n\nconst LogoStyle = styled.img`\n    width:calc(5em + 2vw);\n    margin-top:2px;\n    z-index:999;\n`;\n\n\nexport {\n    HeaderStyle,\n    LogoStyle,\n    LinkStyle\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {HeaderStyle, LogoStyle, LinkStyle} from './NavStyle'\nimport logo from '../../images/logo.png';\n\nclass TopNav extends React.Component {\n    render() {\n        return (\n            <HeaderStyle>\n                <Link to=\"/\">\n                    <LogoStyle src={logo} alt=\"logo\" />\n                </Link>\n                <LinkStyle>\n                    <Link to='/'> Home </Link>\n                    <Link to='/datasets'> Datasets </Link>\n                    <Link to='/drugs'> Drugs </Link>\n                    <Link to='/tissues'> Tissues </Link>\n                    <Link to='/doc'> Documentation </Link>\n                </LinkStyle>         \n            </HeaderStyle>\n        )\n    }\n}\n\n\n\nexport default TopNav","import React, {Fragment} from 'react'\nimport * as d3 from 'd3'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\n\nclass TumorGrowthCurve extends React.Component {\n\n    constructor(props) {\n        super(props)\n        //setting states for the data.\n        this.state = {\n            data : []\n        }\n        //binding the functions declared.\n        this.getParams = this.getParams.bind(this)\n        this.norm = this.norm.bind(this)\n        this.dataParse = this.dataParse.bind(this)\n        this.makeTumorGrowthCurve = this.makeTumorGrowthCurve.bind(this)\n        this.batchToggle = this.batchToggle.bind(this)\n    }\n\n    //get the parameters and set the values in the variables.\n    getParams() {\n        const params = new URLSearchParams(this.props.location.search)\n        let patient_param = params.get('patient');\n        let drugid_param = params.get('drug_id');\n\n        return {patient_param: patient_param, drugid_param: drugid_param}\n    }\n\n    // unity normalization\n    norm(value, first) {\n        return (value/first) - 1 \n    }\n\n    // filters by batch - comment out the batch lines for full data\n    // call this command to create a curve!!!\n    dataParse(data, batch_select) {\n        let data_formatted = []\n        let batches = []\n        String.prototype.replaceAll = String.prototype.replaceAll || function(s, r) {\n            return this.replace(new RegExp(s, 'g'), r);\n        };        \n\n        // loop throuth the data and set the values in the variable.\n        for (let i = 0; i < data.length; i++) {\n            batches.push(data[i]['batch'])\n            if (data[i]['batch'] === batch_select) {\n                // let exp_type = ''\n                // //this is used to set the value of exp_type to control or treatment.\n                // if(data[i]['drug'] === 'untreated') { exp_type = 'control' } \n                // else { exp_type = 'treatment' }\n\n                if (data[i]['time'] === 0) {\n                    var new_datapt = {\n                        exp_type: data[i][\"type\"],\n                        batch: data[i]['patient_id'],\n                        model: data[i]['model_id'],\n                        drug: data[i]['drug'],\n                        pdx_points: [{\n                            times: [parseInt(data[i]['time'])],\n                            volumes: [parseFloat(data[i]['volume'])],\n                            volume_normals: [parseFloat(data[i]['volume_normal'])]\n                        }],\n                        pdx_json: [{\n                            model: data[i]['model_id'].replace(/\\./g,' ').replaceAll(' ', '-'),\n                            batch: data[i]['patient_id'],\n                            exp_type: data[i][\"type\"],\n                            time: parseInt(data[i]['time']),\n                            volume: parseFloat(data[i]['volume']),\n                            volume_normal: parseFloat(data[i]['volume_normal'])\n                        }]\n                        \n                    }\n                    data_formatted.push(new_datapt)\n                } else {\n                    if (data[i]['time'] <= 200) {\n                        data_formatted[data_formatted.length - 1].pdx_points[0].times.push(parseInt(data[i]['time']))\n                        data_formatted[data_formatted.length - 1].pdx_points[0].volumes.push(parseFloat(data[i]['volume']))\n                        data_formatted[data_formatted.length - 1].pdx_points[0].volume_normals.push(parseFloat(data[i]['volume_normal']))\n                        data_formatted[data_formatted.length - 1].pdx_json.push(\n                            {\n                                model: data[i]['model_id'],\n                                batch: data[i]['patient_id'],\n                                exp_type: data[i][\"type\"],\n                                time: parseInt(data[i]['time']),\n                                volume: parseFloat(data[i]['volume']),\n                                volume_normal: parseFloat(data[i]['volume_normal'])\n                            }\n                        )\n                    }\n                }\n            }\n        }\n\n        //normalizing\n        // for (var i = 0; i < data_formatted.length; i++) {\n        //     var item = data_formatted[i]\n        //     var first = item.pdx_points[0].volumes[0]\n        //     for (var j = 0; j < item.pdx_points[0].volumes.length; j++) {\n        //         data_formatted[i].pdx_points[0].volumes[j] = this.norm(item.pdx_points[0].volumes[j], first)\n        //         data_formatted[i].pdx_json[j].volume = item.pdx_points[0].volumes[j]\n        //     }\n        // }\n        console.log(data_formatted)\n        this.setState({ data: data_formatted })\n    }\n\n    // toggle if batches present\n    // currently no batch in the data, so took patient id as the batch.\n    batchToggle(plotId, batches) {\n        var select = d3.select('#pdx' + plotId) // TODO: PLOT ID\n                        .append('select')\n                        .attr('class','select')\n                        .on('change',onchange)\n                \n     \n        select.selectAll('option')\n                .data(batches).enter()\n                .append('option')\n                .text(function (d) { return d; });\n                    \n        function onchange() {\n            d3.select('select').property('value')\n            select('#pdxplot').remove()\n        };\n    } \n\n\n    componentDidMount() {\n        let drugid_param = this.getParams().drugid_param\n        let patient_param = this.getParams().patient_param\n        axios.get(`http://localhost:5000/api/v1/treatment?drug=${drugid_param}&patient=${patient_param}`)\n             .then(response => {\n                function unique(value, index, self) { \n                    return self.indexOf(value) === index;\n                }\n                let batches = []\n                for (let i = 0; i < response.data.length; i++) {\n                    batches.push(response.data[i][\"batch\"])\n                    \n                }\n                this.batchToggle(\"plot\", batches.filter(unique))\n                this.dataParse(response.data, batches[0]);\n             })\n    }\n\n    componentDidUpdate() {\n        const node = this.node;\n        let plotId = 'plot'\n        if (this.state.data.length !== 0) {\n            this.makeTumorGrowthCurve(this.state.data, plotId, node)\n            d3.select(\".no-graph\").remove()\n        } else {\n            d3.select(\"svg\").remove()\n        }\n        \n    }\n\n    // This is the main function to create Growth curves.\n\n    makeTumorGrowthCurve(data, plotId, node) {\n        this.node = node\n        tumorCurve(data, plotId, node)\n\n        String.prototype.replaceAll = String.prototype.replaceAll || function(s, r) {\n            return this.replace(new RegExp(s, 'g'), r);\n        };\n\n        // unique function\n        // usage: var a = [1,2,3,4]; unique = a.filter(unique);\n        function unique(value, index, self) { \n            return self.indexOf(value) === index;\n        }\n\n        // get the union set of all timepoints for the means\n        // until the last timepoint of the shortest graph\n        // returns [ [control] , [treatment] ]\n        function getUnionOfTimepoints(data) {\n            var control = []\n            var treatment = []\n            // var c_ind = data[0].exp_type == \"control\" ? 0 : 1\n            // var t_ind = data[0].exp_type == \"treatment\" ? 0 : 1\n            let minControl, minTreatment;\n            for (var i = 0; i < data.length; i++) {\n                if (data[i].exp_type === \"control\") {\n                    minControl = data[i].pdx_points[0].times[data[i].pdx_points[0].times.length - 1]; \n                    break;\n                }\n            }\n            for (var i = 0; i < data.length; i++) {\n                if (data[i].exp_type === \"treatment\") {\n                    minTreatment = data[i].pdx_points[0].times[data[i].pdx_points[0].times.length - 1]; \n                    break;\n                }\n            }\n             \n\n            // merging time point arrays, and then unique\n            for (var i = 0; i < data.length; i++) {\n                var temp = data[i].pdx_points[0].times;\n                if (data[i].exp_type === 'control') {\n                    control = control.concat(temp)\n                    minControl = temp[temp.length - 1] < minControl ? temp[temp.length - 1] : minControl\n                } else {\n                    treatment = treatment.concat(data[i].pdx_points[0].times)\n                    minTreatment = temp[temp.length - 1] < minTreatment ? temp[temp.length - 1] : minTreatment\n                }\n            }\n            // unique, sort, and cut off at the last timepoint of shortest graph\n            control = control.filter(unique).sort(function (a, b) {  return a - b;  });\n            var index = control.indexOf(minControl)\n            control = control.slice(0, index + 1)\n\n            treatment = treatment.filter(unique).sort(function (a, b) {  return a - b;  });\n            index = treatment.indexOf(minTreatment)\n            treatment = treatment.slice(0, index + 1)\n\n            return [control, treatment]\n          \n            \n             \n        }\n\n\n        function tumorCurve(data, plotId, node) {\n            // let drug = data[0]['drug']\n\n            //calculating max time, min/max volumes of all data\n            var maxTimeArray = [];\n            var minVolArray = [];\n            var maxVolArray = [];\n            var maxVolNormArray = [];\n            for (var i = 0; i < data.length; i++) {\n                maxTimeArray.push(d3.max(data[i].pdx_points[0].times));\n                minVolArray.push(d3.min(data[i].pdx_points[0].volumes));\n                maxVolArray.push(d3.max(data[i].pdx_points[0].volumes));\n                maxVolNormArray.push(d3.max(data[i].pdx_points[0].volume_normals));\n            }\n\n            var maxTime = Math.max.apply(null, maxTimeArray);\n            var minVolume = Math.min.apply(null, minVolArray);\n            var maxVolume = Math.max.apply(null, maxVolArray);\n            var maxVolNorm = Math.max.apply(null, maxVolNormArray);\n\n            var exp_types = ['control', 'treatment']\n\n            // positioning variables\n            var width = 970;\n            var height = 500;\n            var margin = {\n                top:50,\n                right:260,\n                bottom:200,\n                left:130\n            }\n            // make the svg element\n            var svg = d3.select(node)\n                        .append('svg')\n                        .attr('id', 'pdx' + plotId)\n                        .attr('xmlns', 'http://www.w3.org/2000/svg')\n                        .attr('xmlns:xlink', 'http://www.w3.org/1999/xlink') // for downloading\n                        .attr('width', width + margin.left + margin.right)\n                        .attr('height', height + margin.top + margin.bottom)\n                        .append('g')\n                        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            // legend\n            var legend = svg.selectAll('.legend')\n                            .data(exp_types)\n                            .enter()\n\n            legend.append('circle')\n                    .attr('id', function(d,i) {\n                        return 'legend-dot-' + exp_types[i]\n                    })\n                    .attr('class', 'legend')\n                    .attr('r', 5)\n                    .attr('fill',function(d,i) {\n                        if (exp_types[i] === 'control') {\n                            return '#cd5686';\n                        } else {\n                            return '#5974c4';\n                        }\n                    })\n                    .attr('cx', width + 30)\n                    .attr('cy', function(d,i) {return height/2 - 50 + (i*50);})\n\n            legend.append('text')\n                    .attr('id', function(d,i) {\n                        return 'legend-text-' + exp_types[i]\n                    })\n                    .attr('class', 'legend')\n                    .attr('fill','black')\n                    .style('font-size', '16px')\n                    .attr('x', width+40)\n                    .attr('y', function(d,i) {return height/2 - 45 + (i*50);})\n                    .text(function(d,i) {return exp_types[i]})\n\n\n            // set domain and range scaling\n            var xrange = d3.scaleLinear()\n                            .domain([0, maxTime]) \n                            .range([0, width])\n                            .nice();\n\n            var yrange = d3.scaleLinear()\n                            .domain([0, maxVolume])\n                            .range([height, 0])\n                            .nice();\n\n            //set axes for graph\n            var xAxis = d3.axisBottom()\n                            .scale(xrange)\n                            .tickPadding(2);\n\n            var yAxis = d3.axisLeft()\n                            .scale(yrange)\n                            .tickPadding(2);\n\n            // Add the X Axis\n            var xAxisAdd = svg.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', 'translate(0,' + yrange(0) + ')')\n                .attr('fill', 'none')\n                .attr('stroke', 'black')\n                .attr('stroke-width', 1)\n                .call(xAxis);\n\n            // X axis label\n            svg.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('fill','black')\n                .attr('transform', 'translate('+ (width/2) +','+(height+40)+')')\n                .text('Time (days)');\n\n            // Add the Y Axis\n            var yAxisAdd = svg.append('g')\n                .attr('class', 'y axis')\n                .attr('fill', 'none')\n                .attr('stroke', 'black')\n                .attr('stroke-width', 1)\n                .call(yAxis);\n\n            // Y axis label\n            svg.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('fill','black')\n                .attr('transform', 'translate(' + -60 +','+(height/2)+')rotate(-90)')\n                .text('Volume (mm³)');\n\n            // remove strokes for all ticks\n            svg.selectAll('.tick').select('text')\n                    .attr('fill', 'black')\n                    .attr('stroke', 'none')\n                    .attr(\"font-size\", \"14px\")\n            \n            let graph = svg.append(\"g\")\n                            .attr(\"id\", \"curves\")\n            // plot each model\n            plotBatch(data, graph, xrange, yrange, width, height, false)\n            volumeToggle(data, svg, xrange, yrange, yAxis, yAxisAdd, width, height, maxVolume, maxVolNorm, plotId)\n        }\n\n        function plotBatch(data, graph, xrange, yrange, width, height, norm) {\n            //when using d.model, use d.model.replace(/\\./g,' ').replaceAll(' ', '-')\n            //to replace all the periods with dashes because dots interfere with classes\n        \n            var models = graph.selectAll('g.model')\n                .data(data)\n                .enter()\n                    .append('g')\n                        .attr('class', 'model')\n        \n            // plotting the dots\n            var dots = models.selectAll('.model-dot')\n                .data(function(d) {return d.pdx_json})\n                .enter();\n        \n            var paths = graph.selectAll('.model-path')\n                .data(function(d) {return data})\n                .enter();\n        \n            // making tooltips\n            // var tooltips = models.selectAll('.tooltip-dot')\n            //     .data(function(d) {return d.pdx_json})\n            //     .enter();\n        \n            //     // timepoint\n            //     tooltips.append('text')\n            //         .attr('id', function(d,i) { return 'tooltip-t-' + d.model.replace(/\\./g,' ').replaceAll(' ', '-') + '-' + d.exp_type + i})\n            //         .attr('class', 'tooltip-dot')\n            //         .attr('dx', width+20)\n            //         .attr('dy', height/2 + 30)\n            //         .attr('font-size', '14px')\n            //         .style('opacity', 0)\n            //         .attr('fill', 'black')\n            //         .html(function(d) {return 'Time: ' + d.time + ' days'})\n                \n            //     // volume\n            //     tooltips.append('text')\n            //         .attr('id', function(d,i) { return 'tooltip-v-' + d.model.replace(/\\./g,' ').replaceAll(' ', '-') + '-' + d.exp_type + i})\n            //         .attr('class', 'tooltip-dot')\n            //         .attr('dx', width+20)\n            //         .attr('dy', height/2 + 45)\n            //         .attr('font-size', '14px')\n            //         .style('opacity', 0)\n            //         .attr('fill', 'black')\n            //         .html(function(d) {\n            //             if (norm) {\n            //                 return 'Volume: ' + d3.format('.2f')(d.volume_normal) + ' mm³'\n            //             } else {\n            //                 return 'Volume: ' + d3.format('.2f')(d.volume) + ' mm³'\n            //             }\n                        \n            //         })\n                \n            dots.append('circle')\n                .attr('id', function(d,i) {\n                    return 'dot-' + d.model.replace(/\\./g,' ').replaceAll(' ', '-') + '-' + \n                            d.exp_type + i\n                })\n                .attr('class', function(d) {\n                    return 'model-dot ' + \n                            d.model.replace(/\\./g,' ').replaceAll(' ', '-') + ' ' + \n                            d.batch\n                })\n                .attr('r', 4)\n                .attr('fill', function(d,i) {\n                    if (d.exp_type === 'control') {\n                        return '#cd5686';\n                    } else {\n                        return '#5974c4';\n                    }\n                })\n                .style('opacity', 0.6)\n                .attr('cx', function(d) {return xrange(d.time);})\n                .attr('cy', function(d) {\n                    if (norm) {\n                        return yrange(d.volume_normal);\n                    } else {\n                        return yrange(d.volume);\n                    }\n                    \n                })\n\n        \n            // line function, to join dots\n            var linepath = d3.line()\n                .x(function(d) {return xrange(d.time);})\n                .y(function(d) {\n                    if (norm) {\n                        return yrange(d.volume_normal);\n                    } else {\n                        return yrange(d.volume);\n                    }\n                })\n                \n        \n            // add line\n            paths.append('path')\n                .attr('id', function(d) { return 'path-' + d.model.replace(/\\./g,' ').replaceAll(' ', '-')})\n                .attr('class', function(d) { \n                    return 'model-path ' + d.exp_type + ' ' +\n                            d.model.replace(/\\./g,' ').replaceAll(' ', '-') + ' ' + \n                            d.batch\n                })\n                .attr('d', function(d) {return linepath(d.pdx_json)})\n                .attr('fill', 'none')\n                .style('opacity', 0.6)\n                .attr('stroke', function (d) {\n                    if (d.exp_type === 'control') {\n                        return '#cd5686';\n                    } else {\n                        return '#5974c4';\n                    }\n                })\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', ('3', '3'))\n\n            plotMeans(data, graph, xrange, yrange, width, height)\n            // modelToggle(graph, width, height)\n        }\n\n        // plot the mean of each experiment type (control, treatment)\n        function plotMeans(data, svg, xrange, yrange, width, height) {\n            var timeUnion = getUnionOfTimepoints(data)\n            let exp_types = []\n\n            // if there is no control\n            if (timeUnion[0].length === 0) {\n                exp_types = [\"treatment\"]\n                timeUnion.shift()\n            } else if (timeUnion[1].length === 0) { //no treatment\n                exp_types = [\"control\"]\n                timeUnion.pop()\n            } else {\n                exp_types = ['control', 'treatment']\n            }\n             \n            \n            var ypoint_arr = [] // un-yranged\n            var all_ypoint = [] // for std devs\n\n            //TODO: fix the batch, it's the first one rn\n            var batch = data[0].batch\n\n            for (var n = 0; n < exp_types.length; n++) {\n                var exp = exp_types[n]\n                var times = timeUnion[n]\n                var selection = d3.selectAll('.model-path.' + exp_types[n])._groups     \n                // for each timepoint\n                for (var i = 0; i < timeUnion[n].length; i++) {\n                    var temp_ycoord = []\n                    \n                    // for each path, get ycoord for each timepoint in union\n                    for (var j = 0; j < selection.length; j++) {\n                        var path = selection[j][0]\n                        var ycoord = findY(path, xrange(timeUnion[n][i])) \n                        temp_ycoord.push(yrange.invert(ycoord))\n                    }\n\n                    // append array to all_ypoint for std devs\n                    all_ypoint.push(temp_ycoord)\n                    // append mean to ypoint_arr\n                    ypoint_arr.push(mean(temp_ycoord))\n                }\n                // plot error bars\n                // plotErrorBars(data, exp, times, all_ypoint, ypoint_arr, svg, xrange, yrange)\n\n                // mean svg\n                var mean_svg = svg.append('g')\n                    .attr('id', 'mean_' + exp_types[n])\n\n                //tooltips\n                var tooltips = svg.selectAll('.tooltip-mean-dot' + exp)\n                    .data(ypoint_arr)\n                    .enter();\n\n                // timepoint\n                tooltips.append('text')\n                    .attr('id', function(d,i) { return 'tooltip-mean-t-' + batch + '-' + exp + i})\n                    .attr('class', 'tooltip-mean-dot' + exp)\n                    .attr('dx', width+20)\n                    .attr('dy', height/2 + 30)\n                    .attr('font-size', '14px')\n                    .style('opacity', 0)\n                    .attr('fill', 'black')\n                    .html(function(d,i) {return 'Time: ' + times[i] + ' days'})\n\n                // volume\n                tooltips.append('text')\n                    .attr('id', function(d,i) { return 'tooltip-mean-v-' + batch + '-' + exp + i})\n                    .attr('class', 'tooltip-mean-dot')\n                    .attr('dx', width+20)\n                    .attr('dy', height/2 + 45)\n                    .attr('font-size', '14px')\n                    .style('opacity', 0)\n                    .attr('fill', 'black')\n                    .html(function(d,i) {return 'Volume: ' + d3.format('.2f')(ypoint_arr[i]) + ' mm³'})\n                \n                var mean_dots = mean_svg.selectAll('.mean-dot')\n                    .data(ypoint_arr)\n                    .enter()\n                mean_dots.append('circle')\n                    .attr('id', function(d,i) {\n                        return 'mean-dot-' + exp_types[n] + '-' + batch\n                    })\n                    .attr('class', 'mean-dot ' + batch)\n                    .attr('r', 4)\n                    .attr('fill',function() {\n                        if (exp_types[n] === 'control') {\n                            return '#cd5686'; \n                        } else {\n                            return '#5974c4';\n                        }\n                    })\n                    .attr('cx', function(d,i) {return xrange(timeUnion[n][i]);})\n                    .attr('cy', function(d,i) {return yrange(ypoint_arr[i]);})\n                    .on({\n                        'mouseover': function(d,i) {\n                            d3.select('#tooltip-mean-t-' + batch + '-' + exp + i).transition().duration(300).style('opacity', 1);\n                            d3.select('#tooltip-mean-v-' + batch + '-' + exp + i).transition().duration(300).style('opacity', 1);\n                        },\n                        'mouseout': function(d,i) {\n                            d3.select('#tooltip-mean-t-' + batch + '-' + exp + i).transition().duration(300).style('opacity', 0);\n                            d3.select('#tooltip-mean-v-' + batch + '-' + exp + i).transition().duration(300).style('opacity', 0);\n                        },\n                    })\n\n                var mean_path = mean_svg.selectAll('.mean-path')\n                    .data(ypoint_arr)\n                    .enter();\n\n                \n                var linepath = d3.line()\n                    .x(function(d,i) {return xrange(timeUnion[n][i]);})\n                    .y(function(d,i) {return yrange(ypoint_arr[i]);})\n\n                mean_path.append('path')\n                    .attr('id', 'mean-path-' + exp_types[n] + '-' + batch)\n                    .attr('class',  'mean-path ' + batch)\n                    .attr('d', function(d) {return linepath(ypoint_arr)})\n                    .attr('fill', 'none')\n                    .style('opacity', 0.2)\n                    .attr('stroke', function() {\n                        if (exp_types[n] === 'control') {\n                            return '#cd5686'; \n                        } else {\n                            return '#5974c4';\n                        }\n                    })\n                    .attr('stroke-width', 2)\n\n                \n\n                // reset y arrs\n                all_ypoint = []\n                ypoint_arr = []\n            }       \n        }\n\n        //toggle to show each model\n        function modelToggle(svg, width, height) {\n            var nest = d3.nest()\n                .key(function(d) {return d;})\n                .entries([''])\n            \n            nest.forEach(function(d,i) {\n                var modelToggle = svg.append('rect')\n                .attr('x', width + 21)\n                .attr('y', height/2 + 40)\n                .attr('id', 'modelToggle')\n                .attr('width', 10)\n                .attr('height', 10)\n                .attr('fill', 'black')\n                .attr('stroke', 'black')\n                .attr('stroke-width', 1)\n                .on('click', function () {\n                    var active = d.active ? false : true ,\n                    newOpacity = active ? 0 : 1,\n                    newFill = active? 'white' : 'black';\n\n                    // Hide or show the elements\n                    d3.selectAll('.model-dot').style('opacity', newOpacity);\n                    d3.selectAll('.model-path').style('opacity', newOpacity);\n                    d3.select('#modelToggle').attr('fill', newFill)\n\n                    // Update whether or not the elements are active\n                    d.active = active;\n                })\n                .on({\n                    'mouseover': function() {\n                        d3.select(this).style('cursor', 'pointer');\n                    },\n                    'mouseout': function() {\n                        d3.select(this).style('cursor', 'default');\n                    }\n                })\n\n                var modelToggleText = svg.append('text')\n                    .attr('dx', width + 35)\n                    .attr('dy', height/2 + 50)\n                    .attr('fill', 'black')\n                    .text('Show all curves')\n                    .on('click', function () {\n                        var active = d.active ? false : true ,\n                        newOpacity = active ? 0 : 1,\n                        newFill = active? 'white' : 'black';\n            \n                        // Hide or show the elements\n                        d3.selectAll('.model-dot').style('opacity', newOpacity);\n                        d3.selectAll('.model-path').style('opacity', newOpacity);\n                        d3.select('#modelToggle').attr('fill', newFill)\n            \n                        // Update whether or not the elements are active\n                        d.active = active;\n                    })\n                    .on({\n                        'mouseover': function() {\n                            d3.select(this).style('cursor', 'pointer');\n                        },\n                        'mouseout': function() {\n                            d3.select(this).style('cursor', 'default');\n                        }\n                    })\n            })\n        } \n\n\n        function mean(arr) {\n            var total = 0\n            for (var i = 0; i < arr.length; i++) {\n                total += arr[i]\n            }\n            return (total/arr.length)\n        }\n\n        // thank you stackoverflow user Wei\n        // https://stackoverflow.com/questions/15578146/get-y-coordinate-of-point-along-svg-path-with-given-an-x-coordinate\n        function findY(path, x) {\n            var pathLength = path.getTotalLength()\n            var start = 0\n            var end = pathLength\n            var target = (start + end) / 2\n        \n            // Ensure that x is within the range of the path\n            x = Math.max(x, path.getPointAtLength(0).x)\n            x = Math.min(x, path.getPointAtLength(pathLength).x)\n        \n            // Walk along the path using binary search \n            // to locate the point with the supplied x value\n            while (target >= start && target <= pathLength) {\n            var pos = path.getPointAtLength(target)\n        \n            // use a threshold instead of strict equality \n            // to handle javascript floating point precision\n            if (Math.abs(pos.x - x) < 0.001) {\n                return pos.y\n            } else if (pos.x > x) {\n                end = target\n            } else {\n                start = target\n            }\n            target = (start + end) / 2\n            }\n        }\n\n        //takes in an array of arrays and an array of means,\n        // and returns array of std devs\n        function stdDev(values, means) {\n            var stdDevs = []\n            for (var i = 0; i < values.length; i++) {\n            var temp = 0;\n            for (var j = 0; j < values[i].length; j++) {\n                temp += Math.pow(values[i][j] - means[i], 2);\n            }\n            stdDevs.push(Math.sqrt(temp)/values[i].length);\n            }\n            return stdDevs;\n        }\n\n        function plotErrorBars(data, exp, times, all_ypoint, ypoint_arr, svg, xrange, yrange) {\n            var stdDevs = stdDev(all_ypoint, ypoint_arr)\n\n            var errorBars = svg.append('g')\n                .attr('id', 'errorBars')\n\n            var errorMidBar = errorBars.selectAll('line.error')\n                .data(stdDevs);\n\n                errorMidBar.enter()\n                    .append('line')\n                    .attr('class', 'error')\n                    .attr('stroke', function() {\n                        if (exp === 'control') {\n                            return '#3b9dd6'; \n                        } else {\n                            return '#e0913c';\n                        }\n                    })\n                    .attr('stroke-width', 2)\n                    .attr('x1', function(d,i) { return xrange(times[i]); })\n                    .attr('x2', function(d,i) { return xrange(times[i]); })\n                    .attr('y1', function(d,i) { return yrange(ypoint_arr[i] + stdDevs[i]); })\n                    .attr('y2', function(d,i) { return yrange(ypoint_arr[i] - stdDevs[i]); });\n\n            var errorTopBar = errorBars.selectAll('line.errorTop')\n                .data(stdDevs);\n\n                errorTopBar.enter()\n                    .append('line')\n                    .attr('class', 'errorTop')\n                    .attr('stroke', function() {\n                        if (exp === 'control') {\n                            return '#3b9dd6'; \n                        } else {\n                            return '#e0913c';\n                        }\n                    })\n                    .attr('stroke-width', 2)\n                    .attr('x1', function(d,i) { return xrange(times[i]) - 3; })\n                    .attr('x2', function(d,i) { return xrange(times[i]) + 3; })\n                    .attr('y1', function(d,i) { return yrange(ypoint_arr[i] + stdDevs[i]);})\n                    .attr('y2', function(d,i) { return yrange(ypoint_arr[i] + stdDevs[i]);});\n\n            var errorBotBar = errorBars.selectAll('line.errorBot')\n                .data(stdDevs);\n\n                errorBotBar.enter()\n                    .append('line')\n                    .attr('class', 'errorBot')\n                    .attr('stroke', function() {\n                        if (exp === 'control') {\n                            return '#3b9dd6'; \n                        } else {\n                            return '#e0913c';\n                        }\n                    })\n                    .attr('stroke-width', 2)\n                    .attr('x1', function(d,i) { return xrange(times[i]) - 3; })\n                    .attr('x2', function(d,i) { return xrange(times[i]) + 3; })\n                    .attr('y1', function(d,i) { return yrange(ypoint_arr[i] - stdDevs[i]);})\n                    .attr('y2', function(d,i) { return yrange(ypoint_arr[i] - stdDevs[i]);});\n        }\n\n        //toggle to show each model\n        function volumeToggle(data, svg, xrange, yrange, yAxisAdd, yAxis, width, height, maxVolume, maxVolNorm, plotId) {\n            // var nest = d3.nest()\n            //     .key(function(d) {return d;})\n            //     .entries([''])\n\n            // nest.forEach(function(d,i) {\n                \n\n                var volRaw = svg.append(\"rect\")\n                    .attr('x', width+25)\n                    .attr(\"y\", height/2 + 50)\n                    .attr(\"width\", 70)\n                    .attr(\"height\", 20)\n                    .attr(\"fill\", \"#cd5686\")\n                    .style(\"opacity\", 0.8)\n                    .attr('id', 'volRawToggle')\n                    .on('click', function () {\n                        yrange = d3.scaleLinear()\n                                        .domain([0, maxVolume])\n                                        .range([height, 0])\n                                        .nice();\n\n                        yAxis = d3.axisLeft()\n                                        .scale(yrange)\n                                        .tickPadding(2);\n\n                        d3.selectAll(\"g.y.axis\").call(yAxis)\n                        svg.selectAll('.tick').select('text')\n                            .attr('fill', 'black')\n                            .attr('stroke', 'none')\n                            .attr(\"font-size\", \"14px\")\n                        d3.select(\"#curves\").remove()\n                        let graph = svg.append(\"g\")\n                                        .attr(\"id\", \"curves\")\n                        plotBatch(data, graph, xrange, yrange, width, height, false)\n                    \n                        d3.select('#volRawToggle').attr('fill', \"#cd5686\")\n                        d3.select('#volNormToggle').attr('fill', \"lightgray\")\n                        \n                    })\n\n                var volNorm = svg.append(\"rect\")\n                    .attr('x', width+25)\n                    .attr(\"y\", height/2 + 70)\n                    .attr(\"width\", 70)\n                    .attr(\"height\", 20)\n                    .style(\"opacity\", 0.8)\n                    .attr(\"fill\", \"lightgray\")\n                    .attr('id', 'volNormToggle')\n                    .on('click', function () {\n                        yrange = d3.scaleLinear()\n                        .domain([0, maxVolNorm])\n                        .range([height, 0])\n                        .nice();\n\n                        yAxis = d3.axisLeft()\n                                        .scale(yrange)\n                                        .tickPadding(2);\n\n                        d3.selectAll(\"g.y.axis\").call(yAxis)\n                        svg.selectAll('.tick').select('text')\n                            .attr('fill', 'black')\n                            .attr('stroke', 'none')\n                            .attr(\"font-size\", \"14px\")\n                        d3.select(\"#curves\").remove()\n                        let graph = svg.append(\"g\")\n                                        .attr(\"id\", \"curves\")\n                        plotBatch(data, graph, xrange, yrange, width, height, true)\n                    \n                        d3.select('#volRawToggle').attr('fill', \"lightgray\")\n                        d3.select('#volNormToggle').attr('fill', \"#cd5686\")\n                        \n                    })\n\n            var volRawText = svg.append(\"text\")\n                    .attr('fill','black')\n                    .style('font-size', '12px')\n                    .attr(\"id\", \"volRawText\")\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr('x', width+60)\n                    .attr(\"y\", height/2 + 64)\n                    .text(\"Raw\")\n                    .on('click', function () {\n                        yrange = d3.scaleLinear()\n                                        .domain([0, maxVolume])\n                                        .range([height, 0])\n                                        .nice();\n\n                        yAxis = d3.axisLeft()\n                                        .scale(yrange)\n                                        .tickPadding(2);\n\n                        d3.selectAll(\"g.y.axis\").call(yAxis)\n                        svg.selectAll('.tick').select('text')\n                            .attr('fill', 'black')\n                            .attr('stroke', 'none')\n                            .attr(\"font-size\", \"14px\")\n                        d3.select(\"#curves\").remove()\n                        let graph = svg.append(\"g\")\n                                        .attr(\"id\", \"curves\")\n                        plotBatch(data, graph, xrange, yrange, width, height, false)\n                    \n                        d3.select('#volRawToggle').attr('fill', \"#cd5686\")\n                        d3.select('#volNormToggle').attr('fill', \"lightgray\")\n                       \n                    })\n\n            var volNormText = svg.append(\"text\")\n                    .attr('fill','black')\n                    .style('font-size', '12px')\n                    .attr(\"id\", \"volNormText\")\n                    .attr('x', width+29)\n                    .attr(\"y\", height/2 + 84)\n                    .text(\"Normalized\")\n                    .on('click', function () {\n                        yrange = d3.scaleLinear()\n                        .domain([0, maxVolNorm])\n                        .range([height, 0])\n                        .nice();\n\n                        yAxis = d3.axisLeft()\n                                        .scale(yrange)\n                                        .tickPadding(2);\n\n                        d3.selectAll(\"g.y.axis\").call(yAxis)\n                        svg.selectAll('.tick').select('text')\n                            .attr('fill', 'black')\n                            .attr('stroke', 'none')\n                            .attr(\"font-size\", \"14px\")\n                        d3.select(\"#curves\").remove()\n                        let graph = svg.append(\"g\")\n                                        .attr(\"id\", \"curves\")\n                        plotBatch(data, graph, xrange, yrange, width, height, true)\n                    \n                        d3.select('#volRawToggle').attr('fill', \"lightgray\")\n                        d3.select('#volNormToggle').attr('fill', \"#cd5686\")\n                        \n                    })\n            // })\n        } \n\n    }\n\n    render() {\n        return (\n            <Fragment>\n            <div className=\"wrapper\" style={{margin:\"auto\", fontSize:\"16px\"}}>\n                <div className=\"curve-wrapper\" style={{marginTop:\"100px\"}}>\n                    <h1>Drug ID = <span style={{color:\"#cd5686\"}}>{this.getParams().drugid_param}</span> and Patient ID = <span style={{color:\"#cd5686\"}}>{this.getParams().patient_param}</span></h1>\n                    \n                    <svg ref = {node => this.node = node} width={1300} height={620} >\n                    </svg>\n\n                    <div className=\"no-graph\">There is no data for this graph.</div>\n                    \n                    \n                </div>\n                <div className=\"curve-wrapper\" style={{marginTop:\"20px\", padding:\"10px 0px\"}}>\n                    <Link to='/datasets'> ←&nbsp;&nbsp;Back to Datasets </Link>\n                </div>\n                \n               \n            </div>\n            </Fragment>\n            \n            \n        )\n    }\n}\n\nexport default TumorGrowthCurve;","import React, {Fragment} from 'react'\nimport {    CounterNav,\n            Dataset,\n            DatasetDonut,\n            Documentation,\n            DonutDrug,\n            DonutTissue,\n            DrugTable,\n            Footer,\n            HeatMapData,\n            Home,\n            OncoprintData,\n            SearchResult,\n            TopNav,\n            TumorGrowthCurve, } from './Components/index'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport bgImg from './images/bgImg7.png';\nimport { createGlobalStyle } from 'styled-components';\n\n\n\nconst GlobalStyles = createGlobalStyle`\n\n  body {\n    background: linear-gradient(\n      to right top,\n      rgba(255, 255, 255, 0.3), \n      rgba(255, 255, 255, 0.3)\n    ),url('${bgImg}');\n    background-size: cover;\n    background-attachment: fixed;\n    background-position: center;\n    margin: auto;\n    width:100%;\n  }\n\n  #root {\n    display: flex;\n    min-height: 100vh;\n    flex-direction: column;\n    \n    min-width:100vw;\n    width:auto;\n    position:relative;\n    margin:0px;\n  }\n\n  .wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    h1 {\n      font-family:'Raleway', sans-serif;\n      font-weight:700;\n      text-align:center;\n      color: #3453b0;\n    }\n  }\n\n  .heatmap-wrapper, .doc-wrapper {\n    margin-top: 200px;\n  }\n\n  .oprint-wrapper {\n    margin-bottom:100px;\n  }\n\n  .heatmap-wrapper, .oprint-wrapper {\n    min-width:1000px;\n  }\n  .heatmap-wrapper, .oprint-wrapper, .curve-wrapper,\n  .donut-wrapper, .doc-wrapper { //put all wrappers here and wrap them with wrapper\n    background:white;\n    font-family:Arial;\n  }\n\n  .donut-wrapper {\n    margin-bottom:20px;\n    min-width:1300px;\n  }\n\n  .heatmap, .oprint {\n    height:700px;\n    overflow:auto;\n  }\n\n  .curve-wrapper {\n    min-width:1300px;\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    a {\n      text-decoration:none;\n      font-size:16px;\n      padding:20px;\n      font-family: 'Raleway', sans-serif;\n      color: #3453b0;\n    }\n\n    .no-graph {\n      padding:50px;\n    }\n  }\n`\n\nconst Merge = () => {\n    return (\n      <Fragment>\n        <HeatMapData/>\n        <OncoprintData/>\n        <Footer/>\n      </Fragment>\n    )\n}\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Fragment>\n        <Router>\n          <GlobalStyles />\n          <TopNav/>\n          <Switch>\n            <Route path='/' exact component={Home}></Route>\n            <Route path='/curve' exact component={TumorGrowthCurve}></Route>\n            <Route path='/datasets' exact component={DatasetDonut}></Route>\n            <Route path='/dataset/:id' exact component={Dataset}></Route>\n            <Route path='/doc' exact component={Documentation}></Route>\n            <Route path='/drugs' exact component={DonutDrug}></Route>\n            <Route path='/drug/:id' exact component={DrugTable}></Route>\n            <Route path='/home' exact component={CounterNav}></Route>\n            <Route path='/maps' exact component={Merge}></Route>\n            <Route path='/search' exact component={SearchResult}></Route>\n            <Route path='/tissues' exact component={DonutTissue}></Route>\n            <Route render = { () => <h1> 404 Error </h1> } />\n          </Switch>\n        </Router>\n      </Fragment>\n    )\n  }\n}\n\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}